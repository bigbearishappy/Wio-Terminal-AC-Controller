
AC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004974  08004974  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004974  08004974  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004974  08004974  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800497c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08004988  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004988  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f367  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b5  00000000  00000000  0002f39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dc1  00000000  00000000  00033148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010265  00000000  00000000  00047f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084acf  00000000  00000000  0005816e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcc3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000dcc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004874 	.word	0x08004874

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004874 	.word	0x08004874

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b089      	sub	sp, #36	; 0x24
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	240c      	movs	r4, #12
 8000220:	193b      	adds	r3, r7, r4
 8000222:	0018      	movs	r0, r3
 8000224:	2314      	movs	r3, #20
 8000226:	001a      	movs	r2, r3
 8000228:	2100      	movs	r1, #0
 800022a:	f004 fb1b 	bl	8004864 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <MX_GPIO_Init+0xa0>)
 8000230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000232:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <MX_GPIO_Init+0xa0>)
 8000234:	2102      	movs	r1, #2
 8000236:	430a      	orrs	r2, r1
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
 800023a:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <MX_GPIO_Init+0xa0>)
 800023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800023e:	2202      	movs	r2, #2
 8000240:	4013      	ands	r3, r2
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <MX_GPIO_Init+0xa0>)
 8000248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800024a:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_GPIO_Init+0xa0>)
 800024c:	2101      	movs	r1, #1
 800024e:	430a      	orrs	r2, r1
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <MX_GPIO_Init+0xa0>)
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000256:	2201      	movs	r2, #1
 8000258:	4013      	ands	r3, r2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <MX_GPIO_Init+0xa4>)
 8000260:	2201      	movs	r2, #1
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0018      	movs	r0, r3
 8000266:	f001 f8f2 	bl	800144e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800026a:	193b      	adds	r3, r7, r4
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000270:	193b      	adds	r3, r7, r4
 8000272:	2201      	movs	r2, #1
 8000274:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000282:	193b      	adds	r3, r7, r4
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <MX_GPIO_Init+0xa4>)
 8000286:	0019      	movs	r1, r3
 8000288:	0010      	movs	r0, r2
 800028a:	f000 ff5f 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800028e:	0021      	movs	r1, r4
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2202      	movs	r2, #2
 8000294:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2200      	movs	r2, #0
 800029a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	187a      	adds	r2, r7, r1
 80002a4:	23a0      	movs	r3, #160	; 0xa0
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	0011      	movs	r1, r2
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 ff4e 	bl	800114c <HAL_GPIO_Init>

}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b009      	add	sp, #36	; 0x24
 80002b6:	bd90      	pop	{r4, r7, pc}
 80002b8:	40021000 	.word	0x40021000
 80002bc:	50000400 	.word	0x50000400

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fced 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f899 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f7ff ffa3 	bl	8000218 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002d2:	f000 faad 	bl	8000830 <MX_TIM1_Init>
  MX_TIM3_Init();
 80002d6:	f000 fb75 	bl	80009c4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80002da:	f000 fc3b 	bl	8000b54 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80002de:	f000 f8d7 	bl	8000490 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Tim_Arr_backup = TIM3->ARR;
 80002e2:	4b3a      	ldr	r3, [pc, #232]	; (80003cc <main+0x10c>)
 80002e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002e6:	4b3a      	ldr	r3, [pc, #232]	; (80003d0 <main+0x110>)
 80002e8:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &Res, 1);
 80002ea:	493a      	ldr	r1, [pc, #232]	; (80003d4 <main+0x114>)
 80002ec:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <main+0x118>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f003 f8b9 	bl	8003468 <HAL_UART_Receive_IT>

  remote_ctl.state = PRECODE_H;
 80002f6:	4b39      	ldr	r3, [pc, #228]	; (80003dc <main+0x11c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
  remote_ctl.usercode = TURN_OFF_USR_CODE;
 80002fc:	4b37      	ldr	r3, [pc, #220]	; (80003dc <main+0x11c>)
 80002fe:	4a38      	ldr	r2, [pc, #224]	; (80003e0 <main+0x120>)
 8000300:	805a      	strh	r2, [r3, #2]
  remote_ctl.ctlcode = TURN_OFF_CTL_CODE;
 8000302:	4b36      	ldr	r3, [pc, #216]	; (80003dc <main+0x11c>)
 8000304:	4a37      	ldr	r2, [pc, #220]	; (80003e4 <main+0x124>)
 8000306:	80da      	strh	r2, [r3, #6]

#if (TIM_LED_DEBUG || PWM_DEBUG)
  HAL_TIM_Base_Start_IT(&htim3);
#endif

  pir_ctl.state		= NONE_CHK;
 8000308:	4b37      	ldr	r3, [pc, #220]	; (80003e8 <main+0x128>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
  pir_ctl.chk_result = NO_MOVING;
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <main+0x128>)
 8000310:	2200      	movs	r2, #0
 8000312:	705a      	strb	r2, [r3, #1]
  pir_ctl.cycle_cnt		= 0;
 8000314:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <main+0x128>)
 8000316:	2200      	movs	r2, #0
 8000318:	805a      	strh	r2, [r3, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if PIR_DEBUG
	  HAL_Delay(20);
 800031a:	2014      	movs	r0, #20
 800031c:	f000 fd48 	bl	8000db0 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(PIR_IN_PORT, PIR_IN_PIN))
 8000320:	23a0      	movs	r3, #160	; 0xa0
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2102      	movs	r1, #2
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f874 	bl	8001414 <HAL_GPIO_ReadPin>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d006      	beq.n	800033e <main+0x7e>
		  HAL_GPIO_WritePin(LED_BLINK_PORT, LED_BLINK_PIN, GPIO_PIN_RESET);
 8000330:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <main+0x12c>)
 8000332:	2200      	movs	r2, #0
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f889 	bl	800144e <HAL_GPIO_WritePin>
 800033c:	e005      	b.n	800034a <main+0x8a>
	  else
		  HAL_GPIO_WritePin(LED_BLINK_PORT, LED_BLINK_PIN, GPIO_PIN_SET);
 800033e:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <main+0x12c>)
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f882 	bl	800144e <HAL_GPIO_WritePin>
			  USART1_RX_BUF[i] = 0;
		  USART1_RX_STA=0;
	  }
	  HAL_Delay(100);
#endif
	  if(USART1_RX_STA & 0x80)
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <main+0x130>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b25b      	sxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	da36      	bge.n	80003c2 <main+0x102>
	  {
		  if((data_buf[0] & 0x01) == 0x00) {//turn off the AC
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <main+0x134>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	001a      	movs	r2, r3
 800035a:	2301      	movs	r3, #1
 800035c:	4013      	ands	r3, r2
 800035e:	d10c      	bne.n	800037a <main+0xba>
			  //if(HAL_GPIO_ReadPin(PIR_IN_PORT, PIR_IN_PIN))
				  //pir_ctl.state = FAST_CHK;
			if(!HAL_GPIO_ReadPin(PIR_IN_PORT, PIR_IN_PIN))
 8000360:	23a0      	movs	r3, #160	; 0xa0
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	2102      	movs	r1, #2
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f854 	bl	8001414 <HAL_GPIO_ReadPin>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d113      	bne.n	8000398 <main+0xd8>
			  HAL_TIM_Base_Start_IT(&htim3);
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <main+0x138>)
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fdec 	bl	8001f50 <HAL_TIM_Base_Start_IT>
 8000378:	e00e      	b.n	8000398 <main+0xd8>
		  } else if((data_buf[0] & 0x01) == 0x01) {//other action
 800037a:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <main+0x134>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	001a      	movs	r2, r3
 8000380:	2301      	movs	r3, #1
 8000382:	4013      	ands	r3, r2
 8000384:	d008      	beq.n	8000398 <main+0xd8>
			  remote_ctl.state = PRECODE_H;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <main+0x11c>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
			  remote_ctl.usercode = TURN_OFF_USR_CODE;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <main+0x11c>)
 800038e:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <main+0x120>)
 8000390:	805a      	strh	r2, [r3, #2]
			  remote_ctl.ctlcode = TURN_OFF_CTL_CODE;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <main+0x11c>)
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <main+0x124>)
 8000396:	80da      	strh	r2, [r3, #6]

			  //HAL_TIM_Base_Start_IT(&htim3);
		  }
		  for(i = 0;i < USART_REC_LEN; ++i)
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
 800039e:	e009      	b.n	80003b4 <main+0xf4>
			  USART1_RX_BUF[i] = 0;
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4a15      	ldr	r2, [pc, #84]	; (80003fc <main+0x13c>)
 80003a6:	2100      	movs	r1, #0
 80003a8:	54d1      	strb	r1, [r2, r3]
		  for(i = 0;i < USART_REC_LEN; ++i)
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	1dfa      	adds	r2, r7, #7
 80003ae:	7812      	ldrb	r2, [r2, #0]
 80003b0:	3201      	adds	r2, #1
 80003b2:	701a      	strb	r2, [r3, #0]
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b0e      	cmp	r3, #14
 80003ba:	d9f1      	bls.n	80003a0 <main+0xe0>
		  USART1_RX_STA=0;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <main+0x130>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(10);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f000 fcf4 	bl	8000db0 <HAL_Delay>
	  HAL_Delay(20);
 80003c8:	e7a7      	b.n	800031a <main+0x5a>
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	40000400 	.word	0x40000400
 80003d0:	20000038 	.word	0x20000038
 80003d4:	20000041 	.word	0x20000041
 80003d8:	200000ec 	.word	0x200000ec
 80003dc:	20000028 	.word	0x20000028
 80003e0:	ffffff00 	.word	0xffffff00
 80003e4:	ffffba45 	.word	0xffffba45
 80003e8:	20000034 	.word	0x20000034
 80003ec:	50000400 	.word	0x50000400
 80003f0:	20000040 	.word	0x20000040
 80003f4:	2000003c 	.word	0x2000003c
 80003f8:	20000054 	.word	0x20000054
 80003fc:	20000044 	.word	0x20000044

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b093      	sub	sp, #76	; 0x4c
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	2414      	movs	r4, #20
 8000408:	193b      	adds	r3, r7, r4
 800040a:	0018      	movs	r0, r3
 800040c:	2334      	movs	r3, #52	; 0x34
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f004 fa27 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	0018      	movs	r0, r3
 800041a:	2310      	movs	r3, #16
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f004 fa20 	bl	8004864 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f82d 	bl	8001488 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	2202      	movs	r2, #2
 8000432:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2240      	movs	r2, #64	; 0x40
 8000446:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	193b      	adds	r3, r7, r4
 8000450:	0018      	movs	r0, r3
 8000452:	f001 f865 	bl	8001520 <HAL_RCC_OscConfig>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800045a:	f000 f983 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2207      	movs	r2, #7
 8000462:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2100      	movs	r1, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fb66 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000484:	f000 f96e 	bl	8000764 <Error_Handler>
  }
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b013      	add	sp, #76	; 0x4c
 800048e:	bd90      	pop	{r4, r7, pc}

08000490 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	201c      	movs	r0, #28
 800049a:	f000 fd59 	bl	8000f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800049e:	201c      	movs	r0, #28
 80004a0:	f000 fd6b 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2010      	movs	r0, #16
 80004aa:	f000 fd51 	bl	8000f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004ae:	2010      	movs	r0, #16
 80004b0:	f000 fd63 	bl	8000f7a <HAL_NVIC_EnableIRQ>
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if(huart ->Instance == USART2) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a2a      	ldr	r2, [pc, #168]	; (8000574 <HAL_UART_RxCpltCallback+0xb8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d14d      	bne.n	800056a <HAL_UART_RxCpltCallback+0xae>
		if((USART1_RX_STA&0x80)==0)
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	db48      	blt.n	800056a <HAL_UART_RxCpltCallback+0xae>
		{
			USART1_RX_BUF[USART1_RX_STA&0X3F] = Res ;
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	001a      	movs	r2, r3
 80004de:	233f      	movs	r3, #63	; 0x3f
 80004e0:	4013      	ands	r3, r2
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <HAL_UART_RxCpltCallback+0xc0>)
 80004e4:	7811      	ldrb	r1, [r2, #0]
 80004e6:	4a26      	ldr	r2, [pc, #152]	; (8000580 <HAL_UART_RxCpltCallback+0xc4>)
 80004e8:	54d1      	strb	r1, [r2, r3]
			USART1_RX_STA++;
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004f4:	701a      	strb	r2, [r3, #0]
			if(USART1_RX_STA > (USART_REC_LEN-1))
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b0e      	cmp	r3, #14
 80004fc:	d902      	bls.n	8000504 <HAL_UART_RxCpltCallback+0x48>
				USART1_RX_STA=0;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]

			if(Res==0xFF) {
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <HAL_UART_RxCpltCallback+0xc0>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2bff      	cmp	r3, #255	; 0xff
 800050a:	d128      	bne.n	800055e <HAL_UART_RxCpltCallback+0xa2>
				data_buf_len = USART1_RX_BUF[1] - 4;
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <HAL_UART_RxCpltCallback+0xc4>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	3b04      	subs	r3, #4
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HAL_UART_RxCpltCallback+0xc8>)
 8000516:	701a      	strb	r2, [r3, #0]
				for(i = 0;i < data_buf_len; ++i)
 8000518:	230f      	movs	r3, #15
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e00e      	b.n	8000540 <HAL_UART_RxCpltCallback+0x84>
					data_buf[i] = USART1_RX_BUF[6+i];
 8000522:	200f      	movs	r0, #15
 8000524:	183b      	adds	r3, r7, r0
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	1d9a      	adds	r2, r3, #6
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4914      	ldr	r1, [pc, #80]	; (8000580 <HAL_UART_RxCpltCallback+0xc4>)
 8000530:	5c89      	ldrb	r1, [r1, r2]
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <HAL_UART_RxCpltCallback+0xcc>)
 8000534:	54d1      	strb	r1, [r2, r3]
				for(i = 0;i < data_buf_len; ++i)
 8000536:	183b      	adds	r3, r7, r0
 8000538:	183a      	adds	r2, r7, r0
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	3201      	adds	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_UART_RxCpltCallback+0xc8>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	220f      	movs	r2, #15
 8000546:	18ba      	adds	r2, r7, r2
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3e9      	bcc.n	8000522 <HAL_UART_RxCpltCallback+0x66>
				USART1_RX_STA|=0x80;
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	4252      	negs	r2, r2
 8000556:	4313      	orrs	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 800055c:	701a      	strb	r2, [r3, #0]
			}

			HAL_UART_Receive_IT(huart,&Res,1);
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <HAL_UART_RxCpltCallback+0xc0>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2201      	movs	r2, #1
 8000564:	0018      	movs	r0, r3
 8000566:	f002 ff7f 	bl	8003468 <HAL_UART_Receive_IT>
		}
    }
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b004      	add	sp, #16
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40004400 	.word	0x40004400
 8000578:	20000040 	.word	0x20000040
 800057c:	20000041 	.word	0x20000041
 8000580:	20000044 	.word	0x20000044
 8000584:	20000042 	.word	0x20000042
 8000588:	2000003c 	.word	0x2000003c

0800058c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if(htim == (&htim3)) {
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4b6b      	ldr	r3, [pc, #428]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000598:	429a      	cmp	r2, r3
 800059a:	d000      	beq.n	800059e <HAL_TIM_PeriodElapsedCallback+0x12>
 800059c:	e0cd      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
#if TIM_LED_DEBUG
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		TIM3->ARR = 50000 - 1;
#endif
		if(pir_ctl.state == NONE_CHK) {
 800059e:	4b6a      	ldr	r3, [pc, #424]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d000      	beq.n	80005a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
 80005a6:	e0c8      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			switch(remote_ctl.state){
 80005a8:	4b68      	ldr	r3, [pc, #416]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b06      	cmp	r3, #6
 80005ae:	d900      	bls.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80005b0:	e0c2      	b.n	8000738 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 80005b2:	009a      	lsls	r2, r3, #2
 80005b4:	4b66      	ldr	r3, [pc, #408]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80005b6:	18d3      	adds	r3, r2, r3
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	469f      	mov	pc, r3
			case PRECODE_H:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005bc:	4b65      	ldr	r3, [pc, #404]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005be:	2201      	movs	r2, #1
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 ff43 	bl	800144e <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 80005c8:	4b63      	ldr	r3, [pc, #396]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fe73 	bl	80022b8 <HAL_TIM_PWM_Stop>
				TIM3->ARR = 900 - 1;//9ms
 80005d2:	4b62      	ldr	r3, [pc, #392]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005d4:	4a62      	ldr	r2, [pc, #392]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
				remote_ctl.state = PRECODE_L;
 80005d8:	4b5c      	ldr	r3, [pc, #368]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
				break;
 80005de:	e0ac      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			case PRECODE_L:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005e0:	4b5c      	ldr	r3, [pc, #368]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 ff31 	bl	800144e <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005ec:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fd89 	bl	8002108 <HAL_TIM_PWM_Start>
				TIM3->ARR = 450 - 1;//4.5ms
 80005f6:	4b59      	ldr	r3, [pc, #356]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005f8:	22c2      	movs	r2, #194	; 0xc2
 80005fa:	32ff      	adds	r2, #255	; 0xff
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
				remote_ctl.state = USERCODE_H;
 80005fe:	4b53      	ldr	r3, [pc, #332]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000600:	2202      	movs	r2, #2
 8000602:	701a      	strb	r2, [r3, #0]
				break;
 8000604:	e099      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			case USERCODE_H:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0018      	movs	r0, r3
 800060e:	f000 ff1e 	bl	800144e <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000612:	4b51      	ldr	r3, [pc, #324]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000614:	2100      	movs	r1, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fe4e 	bl	80022b8 <HAL_TIM_PWM_Stop>
				TIM3->ARR = 56 - 1;//0.56ms
 800061c:	4b4f      	ldr	r3, [pc, #316]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800061e:	2237      	movs	r2, #55	; 0x37
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
				remote_ctl.state = USERCODE_L;
 8000622:	4b4a      	ldr	r3, [pc, #296]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000624:	2203      	movs	r2, #3
 8000626:	701a      	strb	r2, [r3, #0]
				break;
 8000628:	e087      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			case USERCODE_L:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800062a:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	0018      	movs	r0, r3
 8000632:	f000 ff0c 	bl	800144e <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000636:	4b48      	ldr	r3, [pc, #288]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000638:	2100      	movs	r1, #0
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fd64 	bl	8002108 <HAL_TIM_PWM_Start>
				if(remote_ctl.usercode >> remote_ctl.usercnt & 0x01)
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000642:	885b      	ldrh	r3, [r3, #2]
 8000644:	001a      	movs	r2, r3
 8000646:	4b41      	ldr	r3, [pc, #260]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	411a      	asrs	r2, r3
 800064c:	0013      	movs	r3, r2
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	d003      	beq.n	800065c <HAL_TIM_PeriodElapsedCallback+0xd0>
					TIM3->ARR = 169 - 1;//1.69ms
 8000654:	4b41      	ldr	r3, [pc, #260]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000656:	22a8      	movs	r2, #168	; 0xa8
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
 800065a:	e002      	b.n	8000662 <HAL_TIM_PeriodElapsedCallback+0xd6>
				else
					TIM3->ARR = 56 - 1;//0.565ms
 800065c:	4b3f      	ldr	r3, [pc, #252]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800065e:	2237      	movs	r2, #55	; 0x37
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
				remote_ctl.usercnt++;
 8000662:	4b3a      	ldr	r3, [pc, #232]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800066c:	711a      	strb	r2, [r3, #4]
				if(remote_ctl.usercnt >= 16){
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	2b0f      	cmp	r3, #15
 8000674:	d906      	bls.n	8000684 <HAL_TIM_PeriodElapsedCallback+0xf8>
					remote_ctl.usercnt = 0;
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
					remote_ctl.state = CTLCODE_H;
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800067e:	2204      	movs	r2, #4
 8000680:	701a      	strb	r2, [r3, #0]
				} else {
					remote_ctl.state = USERCODE_H;
				}
				break;
 8000682:	e05a      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
					remote_ctl.state = USERCODE_H;
 8000684:	4b31      	ldr	r3, [pc, #196]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
				break;
 800068a:	e056      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			case CTLCODE_H:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800068e:	2201      	movs	r2, #1
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fedb 	bl	800144e <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000698:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fe0b 	bl	80022b8 <HAL_TIM_PWM_Stop>
				TIM3->ARR = 56 - 1;//0.56ms
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006a4:	2237      	movs	r2, #55	; 0x37
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
				remote_ctl.state = CTLCODE_L;
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	701a      	strb	r2, [r3, #0]
				break;
 80006ae:	e044      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			case CTLCODE_L:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fec9 	bl	800144e <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80006be:	2100      	movs	r1, #0
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fd21 	bl	8002108 <HAL_TIM_PWM_Start>
				if(remote_ctl.ctlcode >> remote_ctl.ctlcodecnt & 0x01)
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006c8:	88db      	ldrh	r3, [r3, #6]
 80006ca:	001a      	movs	r2, r3
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	411a      	asrs	r2, r3
 80006d2:	0013      	movs	r3, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	4013      	ands	r3, r2
 80006d8:	d003      	beq.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x156>
					TIM3->ARR = 169 - 1;//1.69ms
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006dc:	22a8      	movs	r2, #168	; 0xa8
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
 80006e0:	e002      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x15c>
				else
					TIM3->ARR = 56 - 1;//0.565ms
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006e4:	2237      	movs	r2, #55	; 0x37
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
				remote_ctl.ctlcodecnt++;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006f2:	721a      	strb	r2, [r3, #8]
				if(remote_ctl.ctlcodecnt >= 17){
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006f6:	7a1b      	ldrb	r3, [r3, #8]
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d906      	bls.n	800070a <HAL_TIM_PeriodElapsedCallback+0x17e>
					remote_ctl.ctlcodecnt = 0;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	721a      	strb	r2, [r3, #8]
					remote_ctl.state = CTLSTOP;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000704:	2206      	movs	r2, #6
 8000706:	701a      	strb	r2, [r3, #0]
				} else {
					remote_ctl.state = CTLCODE_H;
				}
				break;
 8000708:	e017      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
					remote_ctl.state = CTLCODE_H;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800070c:	2204      	movs	r2, #4
 800070e:	701a      	strb	r2, [r3, #0]
				break;
 8000710:	e013      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			case CTLSTOP:
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000714:	2100      	movs	r1, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f001 fdce 	bl	80022b8 <HAL_TIM_PWM_Stop>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800071e:	2201      	movs	r2, #1
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fe93 	bl	800144e <HAL_GPIO_WritePin>
				remote_ctl.state = PRECODE_H;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim3);
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fc5b 	bl	8001fec <HAL_TIM_Base_Stop_IT>
				break;
 8000736:	e000      	b.n	800073a <HAL_TIM_PeriodElapsedCallback+0x1ae>
			default:
				break;
 8000738:	46c0      	nop			; (mov r8, r8)
			pir_ctl.cycle_cnt++;*/
		} else if(pir_ctl.state == SLOW_CHK) {
			//TIM3->ARR = 50000;
		}
	}
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000054 	.word	0x20000054
 8000748:	20000034 	.word	0x20000034
 800074c:	20000028 	.word	0x20000028
 8000750:	0800488c 	.word	0x0800488c
 8000754:	50000400 	.word	0x50000400
 8000758:	200000a0 	.word	0x200000a0
 800075c:	40000400 	.word	0x40000400
 8000760:	00000383 	.word	0x00000383

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	641a      	str	r2, [r3, #64]	; 0x40
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0549      	lsls	r1, r1, #21
 8000798:	430a      	orrs	r2, r1
 800079a:	63da      	str	r2, [r3, #60]	; 0x3c
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x44>)
 800079e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	055b      	lsls	r3, r3, #21
 80007a4:	4013      	ands	r3, r2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 facc 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <TIM3_IRQHandler+0x14>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fde8 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	20000054 	.word	0x20000054

08000800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <USART2_IRQHandler+0x14>)
 8000806:	0018      	movs	r0, r3
 8000808:	f002 fe70 	bl	80034ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	200000ec 	.word	0x200000ec

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <SystemInit+0x14>)
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	0512      	lsls	r2, r2, #20
 8000822:	609a      	str	r2, [r3, #8]
#endif
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2310      	movs	r3, #16
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 f80f 	bl	8004864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	2354      	movs	r3, #84	; 0x54
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	230c      	movs	r3, #12
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 f807 	bl	8004864 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	2338      	movs	r3, #56	; 0x38
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	231c      	movs	r3, #28
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f003 ffff 	bl	8004864 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	2334      	movs	r3, #52	; 0x34
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f003 fff8 	bl	8004864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000874:	4b51      	ldr	r3, [pc, #324]	; (80009bc <MX_TIM1_Init+0x18c>)
 8000876:	4a52      	ldr	r2, [pc, #328]	; (80009c0 <MX_TIM1_Init+0x190>)
 8000878:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800087a:	4b50      	ldr	r3, [pc, #320]	; (80009bc <MX_TIM1_Init+0x18c>)
 800087c:	220f      	movs	r2, #15
 800087e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_TIM1_Init+0x18c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25;
 8000886:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <MX_TIM1_Init+0x18c>)
 8000888:	2219      	movs	r2, #25
 800088a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <MX_TIM1_Init+0x18c>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <MX_TIM1_Init+0x18c>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	4b48      	ldr	r3, [pc, #288]	; (80009bc <MX_TIM1_Init+0x18c>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <MX_TIM1_Init+0x18c>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 fafd 	bl	8001ea0 <HAL_TIM_Base_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f7ff ff5b 	bl	8000764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	2160      	movs	r1, #96	; 0x60
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0152      	lsls	r2, r2, #5
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <MX_TIM1_Init+0x18c>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 ffa8 	bl	8002814 <HAL_TIM_ConfigClockSource>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008c8:	f7ff ff4c 	bl	8000764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008cc:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_TIM1_Init+0x18c>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fbba 	bl	8002048 <HAL_TIM_PWM_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008d8:	f7ff ff44 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2154      	movs	r1, #84	; 0x54
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <MX_TIM1_Init+0x18c>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fc40 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000900:	f7ff ff30 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2138      	movs	r1, #56	; 0x38
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2260      	movs	r2, #96	; 0x60
 800090a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 11;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	220b      	movs	r2, #11
 8000910:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	1879      	adds	r1, r7, r1
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_TIM1_Init+0x18c>)
 8000934:	2200      	movs	r2, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fe76 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000940:	f7ff ff10 	bl	8000764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	0192      	lsls	r2, r2, #6
 8000968:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0492      	lsls	r2, r2, #18
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000996:	1d3a      	adds	r2, r7, #4
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_TIM1_Init+0x18c>)
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fc4f 	bl	8003240 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80009a6:	f7ff fedd 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <MX_TIM1_Init+0x18c>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 f893 	bl	8000ad8 <HAL_TIM_MspPostInit>

}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b01c      	add	sp, #112	; 0x70
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	200000a0 	.word	0x200000a0
 80009c0:	40012c00 	.word	0x40012c00

080009c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	2310      	movs	r3, #16
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	0018      	movs	r0, r3
 80009d0:	2310      	movs	r3, #16
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f003 ff45 	bl	8004864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	0018      	movs	r0, r3
 80009de:	230c      	movs	r3, #12
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 ff3e 	bl	8004864 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_TIM3_Init+0xa0>)
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <MX_TIM3_Init+0xa4>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_TIM3_Init+0xa0>)
 80009f0:	229f      	movs	r2, #159	; 0x9f
 80009f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_TIM3_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM3_Init+0xa0>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_TIM3_Init+0xa8>)
 80009fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM3_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_TIM3_Init+0xa0>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_TIM3_Init+0xa0>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fa46 	bl	8001ea0 <HAL_TIM_Base_Init>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a18:	f7ff fea4 	bl	8000764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	0152      	lsls	r2, r2, #5
 8000a24:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a26:	187a      	adds	r2, r7, r1
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_TIM3_Init+0xa0>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fef1 	bl	8002814 <HAL_TIM_ConfigClockSource>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a36:	f7ff fe95 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a46:	1d3a      	adds	r2, r7, #4
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_TIM3_Init+0xa0>)
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fb95 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a56:	f7ff fe85 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b008      	add	sp, #32
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000054 	.word	0x20000054
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	000003e7 	.word	0x000003e7

08000a70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_TIM_Base_MspInit+0x5c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d10e      	bne.n	8000aa0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_TIM_Base_MspInit+0x60>)
 8000a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_TIM_Base_MspInit+0x60>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0109      	lsls	r1, r1, #4
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_TIM_Base_MspInit+0x60>)
 8000a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a9e:	e010      	b.n	8000ac2 <HAL_TIM_Base_MspInit+0x52>
  else if(tim_baseHandle->Instance==TIM3)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_TIM_Base_MspInit+0x64>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10b      	bne.n	8000ac2 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_TIM_Base_MspInit+0x60>)
 8000aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_TIM_Base_MspInit+0x60>)
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_TIM_Base_MspInit+0x60>)
 8000ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aba:	2202      	movs	r2, #2
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40012c00 	.word	0x40012c00
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	240c      	movs	r4, #12
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f003 feba 	bl	8004864 <memset>
  if(timHandle->Instance==TIM1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <HAL_TIM_MspPostInit+0x74>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d123      	bne.n	8000b42 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_TIM_MspPostInit+0x78>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_TIM_MspPostInit+0x78>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_TIM_MspPostInit+0x78>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	0021      	movs	r1, r4
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2202      	movs	r2, #2
 8000b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2202      	movs	r2, #2
 8000b32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	187a      	adds	r2, r7, r1
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fb05 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b009      	add	sp, #36	; 0x24
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	40021000 	.word	0x40021000

08000b54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_USART2_UART_Init+0x64>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b60:	22e1      	movs	r2, #225	; 0xe1
 8000b62:	0252      	lsls	r2, r2, #9
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <MX_USART2_UART_Init+0x60>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fc0c 	bl	80033bc <HAL_UART_Init>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f7ff fddc 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	40004400 	.word	0x40004400

08000bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	2414      	movs	r4, #20
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2314      	movs	r3, #20
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f003 fe48 	bl	8004864 <memset>
  if(uartHandle->Instance==USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <HAL_UART_MspInit+0x8c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d130      	bne.n	8000c40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0289      	lsls	r1, r1, #10
 8000be8:	430a      	orrs	r2, r1
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	0021      	movs	r1, r4
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2201      	movs	r2, #1
 8000c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	187a      	adds	r2, r7, r1
 8000c34:	23a0      	movs	r3, #160	; 0xa0
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fa86 	bl	800114c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b00b      	add	sp, #44	; 0x2c
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	40004400 	.word	0x40004400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c54:	f7ff fde0 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c7e:	f003 fdcd 	bl	800481c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c82:	f7ff fb1d 	bl	80002c0 <main>

08000c86 <LoopForever>:

LoopForever:
  b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   r0, =_estack
 8000c88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	0800497c 	.word	0x0800497c
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	20000180 	.word	0x20000180

08000ca0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x3c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Init+0x3c>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0049      	lsls	r1, r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f810 	bl	8000ce4 <HAL_InitTick>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e001      	b.n	8000cd4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fd4e 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_InitTick+0x88>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d02b      	beq.n	8000d54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_InitTick+0x8c>)
 8000cfe:	681c      	ldr	r4, [r3, #0]
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_InitTick+0x88>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	0019      	movs	r1, r3
 8000d06:	23fa      	movs	r3, #250	; 0xfa
 8000d08:	0098      	lsls	r0, r3, #2
 8000d0a:	f7ff f9f9 	bl	8000100 <__udivsi3>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	0019      	movs	r1, r3
 8000d12:	0020      	movs	r0, r4
 8000d14:	f7ff f9f4 	bl	8000100 <__udivsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f93d 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d112      	bne.n	8000d4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d80a      	bhi.n	8000d40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f90c 	bl	8000f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_InitTick+0x90>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e00d      	b.n	8000d5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e008      	b.n	8000d5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e003      	b.n	8000d5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	781b      	ldrb	r3, [r3, #0]
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b005      	add	sp, #20
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	001a      	movs	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	18d2      	adds	r2, r2, r3
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000008 	.word	0x20000008
 8000d98:	2000017c 	.word	0x2000017c

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <HAL_GetTick+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	2000017c 	.word	0x2000017c

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff fff0 	bl	8000d9c <HAL_GetTick>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	001a      	movs	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	189b      	adds	r3, r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	f7ff ffe0 	bl	8000d9c <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b7f      	cmp	r3, #127	; 0x7f
 8000e0a:	d809      	bhi.n	8000e20 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	231f      	movs	r3, #31
 8000e14:	401a      	ands	r2, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_EnableIRQ+0x30>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e40:	d828      	bhi.n	8000e94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e42:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	33c0      	adds	r3, #192	; 0xc0
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	589b      	ldr	r3, [r3, r2]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	; 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <__NVIC_SetPriority+0xd4>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	33c0      	adds	r3, #192	; 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e92:	e031      	b.n	8000ef8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <__NVIC_SetPriority+0xd8>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3306      	adds	r3, #6
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1dfa      	adds	r2, r7, #7
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	00d2      	lsls	r2, r2, #3
 8000eba:	21ff      	movs	r1, #255	; 0xff
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	43d2      	mvns	r2, r2
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	401a      	ands	r2, r3
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	4003      	ands	r3, r0
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <__NVIC_SetPriority+0xd8>)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	001c      	movs	r4, r3
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	4023      	ands	r3, r4
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	430a      	orrs	r2, r1
 8000eee:	3306      	adds	r3, #6
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	18c3      	adds	r3, r0, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	045b      	lsls	r3, r3, #17
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d301      	bcc.n	8000f20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e010      	b.n	8000f42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <SysTick_Config+0x44>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	3a01      	subs	r2, #1
 8000f26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff ff7c 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x44>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x44>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	1c02      	adds	r2, r0, #0
 8000f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	0002      	movs	r2, r0
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff33 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ffaf 	bl	8000f08 <SysTick_Config>
 8000faa:	0003      	movs	r3, r0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e050      	b.n	8001068 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2225      	movs	r2, #37	; 0x25
 8000fca:	5c9b      	ldrb	r3, [r3, r2]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d008      	beq.n	8000fe4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	2100      	movs	r1, #0
 8000fde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e041      	b.n	8001068 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	210e      	movs	r1, #14
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	491c      	ldr	r1, [pc, #112]	; (8001070 <HAL_DMA_Abort+0xbc>)
 8001000:	400a      	ands	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2101      	movs	r1, #1
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_DMA_Abort+0xc0>)
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	221c      	movs	r2, #28
 800101e:	4013      	ands	r3, r2
 8001020:	2201      	movs	r2, #1
 8001022:	409a      	lsls	r2, r3
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_DMA_Abort+0xc0>)
 8001026:	430a      	orrs	r2, r1
 8001028:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001032:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00c      	beq.n	8001056 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001046:	490a      	ldr	r1, [pc, #40]	; (8001070 <HAL_DMA_Abort+0xbc>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001054:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2225      	movs	r2, #37	; 0x25
 800105a:	2101      	movs	r1, #1
 800105c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2224      	movs	r2, #36	; 0x24
 8001062:	2100      	movs	r1, #0
 8001064:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	fffffeff 	.word	0xfffffeff
 8001074:	40020000 	.word	0x40020000

08001078 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001080:	210f      	movs	r1, #15
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2225      	movs	r2, #37	; 0x25
 800108c:	5c9b      	ldrb	r3, [r3, r2]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d006      	beq.n	80010a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2204      	movs	r2, #4
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e049      	b.n	8001136 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	210e      	movs	r1, #14
 80010ae:	438a      	bics	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	438a      	bics	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	491d      	ldr	r1, [pc, #116]	; (8001144 <HAL_DMA_Abort_IT+0xcc>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_DMA_Abort_IT+0xd0>)
 80010d4:	6859      	ldr	r1, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	221c      	movs	r2, #28
 80010dc:	4013      	ands	r3, r2
 80010de:	2201      	movs	r2, #1
 80010e0:	409a      	lsls	r2, r3
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_DMA_Abort_IT+0xd0>)
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00c      	beq.n	8001114 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001104:	490f      	ldr	r1, [pc, #60]	; (8001144 <HAL_DMA_Abort_IT+0xcc>)
 8001106:	400a      	ands	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001112:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2225      	movs	r2, #37	; 0x25
 8001118:	2101      	movs	r1, #1
 800111a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001128:	2b00      	cmp	r3, #0
 800112a:	d004      	beq.n	8001136 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	0010      	movs	r0, r2
 8001134:	4798      	blx	r3
    }
  }
  return status;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b004      	add	sp, #16
 8001142:	bd80      	pop	{r7, pc}
 8001144:	fffffeff 	.word	0xfffffeff
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e147      	b.n	80013ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4091      	lsls	r1, r2
 8001166:	000a      	movs	r2, r1
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <HAL_GPIO_Init+0x28>
 8001172:	e138      	b.n	80013e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d00b      	beq.n	8001194 <HAL_GPIO_Init+0x48>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001188:	2b11      	cmp	r3, #17
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b12      	cmp	r3, #18
 8001192:	d130      	bne.n	80011f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	43da      	mvns	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	409a      	lsls	r2, r3
 80011b6:	0013      	movs	r3, r2
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ca:	2201      	movs	r2, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	2201      	movs	r2, #1
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0xea>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b12      	cmp	r3, #18
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	58d3      	ldr	r3, [r2, r3]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2207      	movs	r2, #7
 8001248:	4013      	ands	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2107      	movs	r1, #7
 8001262:	400b      	ands	r3, r1
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	6939      	ldr	r1, [r7, #16]
 800127c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	401a      	ands	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	055b      	lsls	r3, r3, #21
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_GPIO_Init+0x174>
 80012be:	e092      	b.n	80013e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3318      	adds	r3, #24
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	589b      	ldr	r3, [r3, r2]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4013      	ands	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	220f      	movs	r2, #15
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	23a0      	movs	r3, #160	; 0xa0
 80012e8:	05db      	lsls	r3, r3, #23
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x1ca>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a45      	ldr	r2, [pc, #276]	; (8001408 <HAL_GPIO_Init+0x2bc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x1c6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HAL_GPIO_Init+0x2c0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x1c2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a43      	ldr	r2, [pc, #268]	; (8001410 <HAL_GPIO_Init+0x2c4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x1be>
 8001306:	2303      	movs	r3, #3
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x1cc>
 800130a:	2305      	movs	r3, #5
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x1cc>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x1cc>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x1cc>
 8001316:	2300      	movs	r3, #0
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	2103      	movs	r1, #3
 800131c:	400a      	ands	r2, r1
 800131e:	00d2      	lsls	r2, r2, #3
 8001320:	4093      	lsls	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001328:	4936      	ldr	r1, [pc, #216]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3318      	adds	r3, #24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001336:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	58d3      	ldr	r3, [r2, r3]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	4013      	ands	r3, r2
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800135c:	4929      	ldr	r1, [pc, #164]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 8001366:	2384      	movs	r3, #132	; 0x84
 8001368:	58d3      	ldr	r3, [r2, r3]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138a:	491e      	ldr	r1, [pc, #120]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 800138c:	2284      	movs	r2, #132	; 0x84
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	035b      	lsls	r3, r3, #13
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	039b      	lsls	r3, r3, #14
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1e13      	subs	r3, r2, #0
 80013f6:	d000      	beq.n	80013fa <HAL_GPIO_Init+0x2ae>
 80013f8:	e6b0      	b.n	800115c <HAL_GPIO_Init+0x10>
  }
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021800 	.word	0x40021800
 8001408:	50000400 	.word	0x50000400
 800140c:	50000800 	.word	0x50000800
 8001410:	50000c00 	.word	0x50000c00

08001414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	000a      	movs	r2, r1
 800141e:	1cbb      	adds	r3, r7, #2
 8001420:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	1cba      	adds	r2, r7, #2
 8001428:	8812      	ldrh	r2, [r2, #0]
 800142a:	4013      	ands	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800142e:	230f      	movs	r3, #15
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e003      	b.n	8001440 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001438:	230f      	movs	r3, #15
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001440:	230f      	movs	r3, #15
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	781b      	ldrb	r3, [r3, #0]
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	0008      	movs	r0, r1
 8001458:	0011      	movs	r1, r2
 800145a:	1cbb      	adds	r3, r7, #2
 800145c:	1c02      	adds	r2, r0, #0
 800145e:	801a      	strh	r2, [r3, #0]
 8001460:	1c7b      	adds	r3, r7, #1
 8001462:	1c0a      	adds	r2, r1, #0
 8001464:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001466:	1c7b      	adds	r3, r7, #1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	1cbb      	adds	r3, r7, #2
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001476:	e003      	b.n	8001480 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001478:	1cbb      	adds	r3, r7, #2
 800147a:	881a      	ldrh	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001496:	4013      	ands	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d11f      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	0013      	movs	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4912      	ldr	r1, [pc, #72]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7fe fe20 	bl	8000100 <__udivsi3>
 80014c0:	0003      	movs	r3, r0
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c6:	e008      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e001      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e009      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	401a      	ands	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d0ed      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40007000 	.word	0x40007000
 80014fc:	fffff9ff 	.word	0xfffff9ff
 8001500:	20000000 	.word	0x20000000
 8001504:	000f4240 	.word	0x000f4240

08001508 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <LL_RCC_GetAPB1Prescaler+0x14>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	23e0      	movs	r3, #224	; 0xe0
 8001512:	01db      	lsls	r3, r3, #7
 8001514:	4013      	ands	r3, r2
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e2f9      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x1e>
 800153c:	e07c      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4bc3      	ldr	r3, [pc, #780]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2238      	movs	r2, #56	; 0x38
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001548:	4bc0      	ldr	r3, [pc, #768]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
 8001550:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b10      	cmp	r3, #16
 8001556:	d102      	bne.n	800155e <HAL_RCC_OscConfig+0x3e>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d002      	beq.n	8001564 <HAL_RCC_OscConfig+0x44>
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4bb9      	ldr	r3, [pc, #740]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d062      	beq.n	8001636 <HAL_RCC_OscConfig+0x116>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15e      	bne.n	8001636 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e2d4      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	429a      	cmp	r2, r3
 8001586:	d107      	bne.n	8001598 <HAL_RCC_OscConfig+0x78>
 8001588:	4bb0      	ldr	r3, [pc, #704]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4baf      	ldr	r3, [pc, #700]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0249      	lsls	r1, r1, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e020      	b.n	80015da <HAL_RCC_OscConfig+0xba>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	23a0      	movs	r3, #160	; 0xa0
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10e      	bne.n	80015c2 <HAL_RCC_OscConfig+0xa2>
 80015a4:	4ba9      	ldr	r3, [pc, #676]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4ba8      	ldr	r3, [pc, #672]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	02c9      	lsls	r1, r1, #11
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	4ba6      	ldr	r3, [pc, #664]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4ba5      	ldr	r3, [pc, #660]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0249      	lsls	r1, r1, #9
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0xba>
 80015c2:	4ba2      	ldr	r3, [pc, #648]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4ba1      	ldr	r3, [pc, #644]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015c8:	49a1      	ldr	r1, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	4b9f      	ldr	r3, [pc, #636]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b9e      	ldr	r3, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	499f      	ldr	r1, [pc, #636]	; (8001854 <HAL_RCC_OscConfig+0x334>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d014      	beq.n	800160c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fbdb 	bl	8000d9c <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbd6 	bl	8000d9c <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e293      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b93      	ldr	r3, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xcc>
 800160a:	e015      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fbc6 	bl	8000d9c <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fbc1 	bl	8000d9c <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e27e      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001628:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0xf6>
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d100      	bne.n	8001644 <HAL_RCC_OscConfig+0x124>
 8001642:	e099      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2238      	movs	r2, #56	; 0x38
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164e:	4b7f      	ldr	r3, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2203      	movs	r2, #3
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x144>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d002      	beq.n	800166a <HAL_RCC_OscConfig+0x14a>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d135      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166a:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4013      	ands	r3, r2
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x162>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e251      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a74      	ldr	r2, [pc, #464]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001688:	4013      	ands	r3, r2
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	4b6e      	ldr	r3, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800169e:	4b6b      	ldr	r3, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016b2:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
 80016bc:	4a68      	ldr	r2, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x340>)
 80016be:	40da      	lsrs	r2, r3
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 80016c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x348>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fb0b 	bl	8000ce4 <HAL_InitTick>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d051      	beq.n	8001776 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e227      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d030      	beq.n	8001740 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0049      	lsls	r1, r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb4c 	bl	8000d9c <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fb47 	bl	8000d9c <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e204      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4013      	ands	r3, r2
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001746:	4949      	ldr	r1, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x34c>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb26 	bl	8000d9c <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fb21 	bl	8000d9c <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1de      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x236>
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2208      	movs	r2, #8
 800177e:	4013      	ands	r3, r2
 8001780:	d047      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2238      	movs	r2, #56	; 0x38
 8001788:	4013      	ands	r3, r2
 800178a:	2b18      	cmp	r3, #24
 800178c:	d10a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d138      	bne.n	8001812 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e1c0      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff faf0 	bl	8000d9c <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff faeb 	bl	8000d9c <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a8      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f1      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2a2>
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fad6 	bl	8000d9c <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fad1 	bl	8000d9c <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e18e      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f1      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x2fe>
 800181c:	e0c6      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	231f      	movs	r3, #31
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	4013      	ands	r3, r2
 800182e:	2b20      	cmp	r3, #32
 8001830:	d11e      	bne.n	8001870 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x31e>
 800183c:	e0b6      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d000      	beq.n	8001848 <HAL_RCC_OscConfig+0x328>
 8001846:	e0b1      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e16c      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
 800184c:	40021000 	.word	0x40021000
 8001850:	fffeffff 	.word	0xfffeffff
 8001854:	fffbffff 	.word	0xfffbffff
 8001858:	ffff80ff 	.word	0xffff80ff
 800185c:	ffffc7ff 	.word	0xffffc7ff
 8001860:	00f42400 	.word	0x00f42400
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004
 800186c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001870:	4baf      	ldr	r3, [pc, #700]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4013      	ands	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x360>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x362>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d011      	beq.n	80018aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4baa      	ldr	r3, [pc, #680]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800188a:	4ba9      	ldr	r3, [pc, #676]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0549      	lsls	r1, r1, #21
 8001890:	430a      	orrs	r2, r1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
 8001894:	4ba6      	ldr	r3, [pc, #664]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	055b      	lsls	r3, r3, #21
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018a2:	231f      	movs	r3, #31
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018aa:	4ba2      	ldr	r3, [pc, #648]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d11a      	bne.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b6:	4b9f      	ldr	r3, [pc, #636]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0049      	lsls	r1, r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa6a 	bl	8000d9c <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fa65 	bl	8000d9c <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e122      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x3e2>
 80018f4:	4b8e      	ldr	r3, [pc, #568]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80018f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f8:	4b8d      	ldr	r3, [pc, #564]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x404>
 800190a:	4b89      	ldr	r3, [pc, #548]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800190c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001910:	2104      	movs	r1, #4
 8001912:	430a      	orrs	r2, r1
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
 8001924:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001928:	4b81      	ldr	r3, [pc, #516]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001930:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001934:	4b7e      	ldr	r3, [pc, #504]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001936:	2104      	movs	r1, #4
 8001938:	438a      	bics	r2, r1
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fa2a 	bl	8000d9c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194c:	e009      	b.n	8001962 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fa25 	bl	8000d9c <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0e1      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x42e>
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fa15 	bl	8000d9c <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001976:	e009      	b.n	800198c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fa10 	bl	8000d9c <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a6d      	ldr	r2, [pc, #436]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0cc      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001996:	231f      	movs	r3, #31
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019a6:	4965      	ldr	r1, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x61c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x496>
 80019b4:	e0b6      	b.n	8001b24 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b6:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2238      	movs	r2, #56	; 0x38
 80019bc:	4013      	ands	r3, r2
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4a4>
 80019c2:	e07e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d153      	bne.n	8001a74 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019d2:	495b      	ldr	r1, [pc, #364]	; (8001b40 <HAL_RCC_OscConfig+0x620>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f9e0 	bl	8000d9c <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff f9db 	bl	8000d9c <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e098      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	049b      	lsls	r3, r3, #18
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a4f      	ldr	r2, [pc, #316]	; (8001b44 <HAL_RCC_OscConfig+0x624>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	431a      	orrs	r2, r3
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0449      	lsls	r1, r1, #17
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a3c:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0549      	lsls	r1, r1, #21
 8001a46:	430a      	orrs	r2, r1
 8001a48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f9a7 	bl	8000d9c <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f9a2 	bl	8000d9c <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e05f      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x534>
 8001a72:	e057      	b.n	8001b24 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a7a:	4931      	ldr	r1, [pc, #196]	; (8001b40 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a86:	2103      	movs	r1, #3
 8001a88:	438a      	bics	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a92:	492d      	ldr	r1, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x628>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f980 	bl	8000d9c <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff f97b 	bl	8000d9c <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e038      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	049b      	lsls	r3, r3, #18
 8001abc:	4013      	ands	r3, r2
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x582>
 8001ac0:	e030      	b.n	8001b24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e02b      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d11e      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2270      	movs	r2, #112	; 0x70
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d117      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	23fe      	movs	r3, #254	; 0xfe
 8001af4:	01db      	lsls	r3, r3, #7
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10e      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	23f8      	movs	r3, #248	; 0xf8
 8001b06:	039b      	lsls	r3, r3, #14
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	0f5b      	lsrs	r3, r3, #29
 8001b16:	075a      	lsls	r2, r3, #29
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b008      	add	sp, #32
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	efffffff 	.word	0xefffffff
 8001b40:	feffffff 	.word	0xfeffffff
 8001b44:	1fc1808c 	.word	0x1fc1808c
 8001b48:	effeffff 	.word	0xeffeffff

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0e9      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2207      	movs	r2, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d91e      	bls.n	8001bac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2207      	movs	r2, #7
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f90c 	bl	8000d9c <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7ff f907 	bl	8000d9c <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0ca      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d006      	beq.n	8001bce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc0:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc6:	21e0      	movs	r1, #224	; 0xe0
 8001bc8:	01c9      	lsls	r1, r1, #7
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	; (8001d48 <HAL_RCC_ClockConfig+0x1fc>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d057      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d12b      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e097      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	049b      	lsls	r3, r3, #18
 8001c14:	4013      	ands	r3, r2
 8001c16:	d11f      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e08b      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d113      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e07f      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e074      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e06d      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f896 	bl	8000d9c <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f7ff f891 	bl	8000d9c <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e054      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2238      	movs	r2, #56	; 0x38
 8001c90:	401a      	ands	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1ec      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d21e      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f86e 	bl	8000d9c <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cc4:	e009      	b.n	8001cda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7ff f869 	bl	8000d9c <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e02c      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1ee      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_ClockConfig+0x200>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d06:	f000 f829 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d0a:	0001      	movs	r1, r0
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	220f      	movs	r2, #15
 8001d14:	401a      	ands	r2, r3
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x204>)
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	58d3      	ldr	r3, [r2, r3]
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	4013      	ands	r3, r2
 8001d20:	000a      	movs	r2, r1
 8001d22:	40da      	lsrs	r2, r3
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x208>)
 8001d26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x20c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7fe ffd9 	bl	8000ce4 <HAL_InitTick>
 8001d32:	0003      	movs	r3, r0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	00001388 	.word	0x00001388
 8001d44:	40021000 	.word	0x40021000
 8001d48:	fffff0ff 	.word	0xfffff0ff
 8001d4c:	ffff8fff 	.word	0xffff8fff
 8001d50:	080048a8 	.word	0x080048a8
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2238      	movs	r2, #56	; 0x38
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0adb      	lsrs	r3, r3, #11
 8001d72:	2207      	movs	r2, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	4835      	ldr	r0, [pc, #212]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d82:	f7fe f9bd 	bl	8000100 <__udivsi3>
 8001d86:	0003      	movs	r3, r0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e05d      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2238      	movs	r2, #56	; 0x38
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2238      	movs	r2, #56	; 0x38
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d138      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2203      	movs	r2, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	2207      	movs	r2, #7
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d10d      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	4824      	ldr	r0, [pc, #144]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x100>)
 8001dcc:	f7fe f998 	bl	8000100 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	227f      	movs	r2, #127	; 0x7f
 8001ddc:	4013      	ands	r3, r2
 8001dde:	434b      	muls	r3, r1
 8001de0:	617b      	str	r3, [r7, #20]
        break;
 8001de2:	e00d      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	481c      	ldr	r0, [pc, #112]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001de8:	f7fe f98a 	bl	8000100 <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	0019      	movs	r1, r3
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	227f      	movs	r2, #127	; 0x7f
 8001df8:	4013      	ands	r3, r2
 8001dfa:	434b      	muls	r3, r1
 8001dfc:	617b      	str	r3, [r7, #20]
        break;
 8001dfe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0f5b      	lsrs	r3, r3, #29
 8001e06:	2207      	movs	r2, #7
 8001e08:	4013      	ands	r3, r2
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	6978      	ldr	r0, [r7, #20]
 8001e12:	f7fe f975 	bl	8000100 <__udivsi3>
 8001e16:	0003      	movs	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e015      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2238      	movs	r2, #56	; 0x38
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d103      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2238      	movs	r2, #56	; 0x38
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b18      	cmp	r3, #24
 8001e3a:	d103      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e3c:	23fa      	movs	r3, #250	; 0xfa
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e001      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e48:	693b      	ldr	r3, [r7, #16]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b006      	add	sp, #24
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	0004      	movs	r4, r0
 8001e7e:	f7ff fb43 	bl	8001508 <LL_RCC_GetAPB1Prescaler>
 8001e82:	0003      	movs	r3, r0
 8001e84:	0b1a      	lsrs	r2, r3, #12
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	58d3      	ldr	r3, [r2, r3]
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	4013      	ands	r3, r2
 8001e90:	40dc      	lsrs	r4, r3
 8001e92:	0023      	movs	r3, r4
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	080048e8 	.word	0x080048e8

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04a      	b.n	8001f48 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223d      	movs	r2, #61	; 0x3d
 8001eb6:	5c9b      	ldrb	r3, [r3, r2]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	223c      	movs	r2, #60	; 0x3c
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7fe fdd1 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223d      	movs	r2, #61	; 0x3d
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f000 fd83 	bl	80029ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2248      	movs	r2, #72	; 0x48
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	223e      	movs	r2, #62	; 0x3e
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	223f      	movs	r2, #63	; 0x3f
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2241      	movs	r2, #65	; 0x41
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2242      	movs	r2, #66	; 0x42
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2243      	movs	r2, #67	; 0x43
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2244      	movs	r2, #68	; 0x44
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2245      	movs	r2, #69	; 0x45
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	5499      	strb	r1, [r3, r2]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2246      	movs	r2, #70	; 0x46
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2247      	movs	r2, #71	; 0x47
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223d      	movs	r2, #61	; 0x3d
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223d      	movs	r2, #61	; 0x3d
 8001f5c:	5c9b      	ldrb	r3, [r3, r2]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d001      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e037      	b.n	8001fd8 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	223d      	movs	r2, #61	; 0x3d
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_TIM_Base_Start_IT+0x90>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x44>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_TIM_Base_Start_IT+0x94>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d116      	bne.n	8001fc2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_TIM_Base_Start_IT+0x98>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d016      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x84>
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d011      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2101      	movs	r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	e008      	b.n	8001fd4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e000      	b.n	8001fd6 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	00010007 	.word	0x00010007

08001fec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	438a      	bics	r2, r1
 8002002:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_TIM_Base_Stop_IT+0x54>)
 800200c:	4013      	ands	r3, r2
 800200e:	d10d      	bne.n	800202c <HAL_TIM_Base_Stop_IT+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_TIM_Base_Stop_IT+0x58>)
 8002018:	4013      	ands	r3, r2
 800201a:	d107      	bne.n	800202c <HAL_TIM_Base_Stop_IT+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	223d      	movs	r2, #61	; 0x3d
 8002030:	2101      	movs	r1, #1
 8002032:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	00001111 	.word	0x00001111
 8002044:	00000444 	.word	0x00000444

08002048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e04a      	b.n	80020f0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223d      	movs	r2, #61	; 0x3d
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	223c      	movs	r2, #60	; 0x3c
 800206a:	2100      	movs	r1, #0
 800206c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f841 	bl	80020f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223d      	movs	r2, #61	; 0x3d
 800207a:	2102      	movs	r1, #2
 800207c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f000 fcaf 	bl	80029ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2248      	movs	r2, #72	; 0x48
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	223e      	movs	r2, #62	; 0x3e
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	223f      	movs	r2, #63	; 0x3f
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2241      	movs	r2, #65	; 0x41
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2242      	movs	r2, #66	; 0x42
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2243      	movs	r2, #67	; 0x43
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2244      	movs	r2, #68	; 0x44
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2245      	movs	r2, #69	; 0x45
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2246      	movs	r2, #70	; 0x46
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2247      	movs	r2, #71	; 0x47
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223d      	movs	r2, #61	; 0x3d
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <HAL_TIM_PWM_Start+0x22>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	223e      	movs	r2, #62	; 0x3e
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	4193      	sbcs	r3, r2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e037      	b.n	800219a <HAL_TIM_PWM_Start+0x92>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d108      	bne.n	8002142 <HAL_TIM_PWM_Start+0x3a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	223f      	movs	r2, #63	; 0x3f
 8002134:	5c9b      	ldrb	r3, [r3, r2]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4193      	sbcs	r3, r2
 800213e:	b2db      	uxtb	r3, r3
 8002140:	e02b      	b.n	800219a <HAL_TIM_PWM_Start+0x92>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d108      	bne.n	800215a <HAL_TIM_PWM_Start+0x52>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	1e5a      	subs	r2, r3, #1
 8002154:	4193      	sbcs	r3, r2
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e01f      	b.n	800219a <HAL_TIM_PWM_Start+0x92>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d108      	bne.n	8002172 <HAL_TIM_PWM_Start+0x6a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2241      	movs	r2, #65	; 0x41
 8002164:	5c9b      	ldrb	r3, [r3, r2]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	1e5a      	subs	r2, r3, #1
 800216c:	4193      	sbcs	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e013      	b.n	800219a <HAL_TIM_PWM_Start+0x92>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b10      	cmp	r3, #16
 8002176:	d108      	bne.n	800218a <HAL_TIM_PWM_Start+0x82>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2242      	movs	r2, #66	; 0x42
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	4193      	sbcs	r3, r2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e007      	b.n	800219a <HAL_TIM_PWM_Start+0x92>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2243      	movs	r2, #67	; 0x43
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	4193      	sbcs	r3, r2
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07b      	b.n	800229a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start+0xaa>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	223e      	movs	r2, #62	; 0x3e
 80021ac:	2102      	movs	r1, #2
 80021ae:	5499      	strb	r1, [r3, r2]
 80021b0:	e023      	b.n	80021fa <HAL_TIM_PWM_Start+0xf2>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_PWM_Start+0xba>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	223f      	movs	r2, #63	; 0x3f
 80021bc:	2102      	movs	r1, #2
 80021be:	5499      	strb	r1, [r3, r2]
 80021c0:	e01b      	b.n	80021fa <HAL_TIM_PWM_Start+0xf2>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Start+0xca>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	2102      	movs	r1, #2
 80021ce:	5499      	strb	r1, [r3, r2]
 80021d0:	e013      	b.n	80021fa <HAL_TIM_PWM_Start+0xf2>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Start+0xda>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2241      	movs	r2, #65	; 0x41
 80021dc:	2102      	movs	r1, #2
 80021de:	5499      	strb	r1, [r3, r2]
 80021e0:	e00b      	b.n	80021fa <HAL_TIM_PWM_Start+0xf2>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start+0xea>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2242      	movs	r2, #66	; 0x42
 80021ec:	2102      	movs	r1, #2
 80021ee:	5499      	strb	r1, [r3, r2]
 80021f0:	e003      	b.n	80021fa <HAL_TIM_PWM_Start+0xf2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2243      	movs	r2, #67	; 0x43
 80021f6:	2102      	movs	r1, #2
 80021f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	0018      	movs	r0, r3
 8002204:	f000 ff96 	bl	8003134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <HAL_TIM_PWM_Start+0x19c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_TIM_PWM_Start+0x11e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <HAL_TIM_PWM_Start+0x1a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_TIM_PWM_Start+0x11e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_TIM_PWM_Start+0x1a4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_TIM_PWM_Start+0x122>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_TIM_PWM_Start+0x124>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	0209      	lsls	r1, r1, #8
 800223e:	430a      	orrs	r2, r1
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_TIM_PWM_Start+0x19c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_TIM_PWM_Start+0x14e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_TIM_PWM_Start+0x1a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d116      	bne.n	8002284 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <HAL_TIM_PWM_Start+0x1ac>)
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d016      	beq.n	8002296 <HAL_TIM_PWM_Start+0x18e>
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	025b      	lsls	r3, r3, #9
 800226e:	429a      	cmp	r2, r3
 8002270:	d011      	beq.n	8002296 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	e008      	b.n	8002296 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2101      	movs	r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e000      	b.n	8002298 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002296:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	40014400 	.word	0x40014400
 80022ac:	40014800 	.word	0x40014800
 80022b0:	40000400 	.word	0x40000400
 80022b4:	00010007 	.word	0x00010007

080022b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 ff32 	bl	8003134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a35      	ldr	r2, [pc, #212]	; (80023ac <HAL_TIM_PWM_Stop+0xf4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_TIM_PWM_Stop+0x36>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <HAL_TIM_PWM_Stop+0xf8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_PWM_Stop+0x36>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a32      	ldr	r2, [pc, #200]	; (80023b4 <HAL_TIM_PWM_Stop+0xfc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_PWM_Stop+0x3a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_TIM_PWM_Stop+0x3c>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a2e      	ldr	r2, [pc, #184]	; (80023b8 <HAL_TIM_PWM_Stop+0x100>)
 8002300:	4013      	ands	r3, r2
 8002302:	d10d      	bne.n	8002320 <HAL_TIM_PWM_Stop+0x68>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <HAL_TIM_PWM_Stop+0x104>)
 800230c:	4013      	ands	r3, r2
 800230e:	d107      	bne.n	8002320 <HAL_TIM_PWM_Stop+0x68>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4929      	ldr	r1, [pc, #164]	; (80023c0 <HAL_TIM_PWM_Stop+0x108>)
 800231c:	400a      	ands	r2, r1
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <HAL_TIM_PWM_Stop+0x100>)
 8002328:	4013      	ands	r3, r2
 800232a:	d10d      	bne.n	8002348 <HAL_TIM_PWM_Stop+0x90>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_TIM_PWM_Stop+0x104>)
 8002334:	4013      	ands	r3, r2
 8002336:	d107      	bne.n	8002348 <HAL_TIM_PWM_Stop+0x90>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_TIM_PWM_Stop+0xa0>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	223e      	movs	r2, #62	; 0x3e
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]
 8002356:	e023      	b.n	80023a0 <HAL_TIM_PWM_Stop+0xe8>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b04      	cmp	r3, #4
 800235c:	d104      	bne.n	8002368 <HAL_TIM_PWM_Stop+0xb0>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]
 8002366:	e01b      	b.n	80023a0 <HAL_TIM_PWM_Stop+0xe8>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b08      	cmp	r3, #8
 800236c:	d104      	bne.n	8002378 <HAL_TIM_PWM_Stop+0xc0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]
 8002376:	e013      	b.n	80023a0 <HAL_TIM_PWM_Stop+0xe8>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d104      	bne.n	8002388 <HAL_TIM_PWM_Stop+0xd0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2241      	movs	r2, #65	; 0x41
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]
 8002386:	e00b      	b.n	80023a0 <HAL_TIM_PWM_Stop+0xe8>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d104      	bne.n	8002398 <HAL_TIM_PWM_Stop+0xe0>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2242      	movs	r2, #66	; 0x42
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]
 8002396:	e003      	b.n	80023a0 <HAL_TIM_PWM_Stop+0xe8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2243      	movs	r2, #67	; 0x43
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800
 80023b8:	00001111 	.word	0x00001111
 80023bc:	00000444 	.word	0x00000444
 80023c0:	ffff7fff 	.word	0xffff7fff

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d124      	bne.n	8002424 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d11d      	bne.n	8002424 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2203      	movs	r2, #3
 80023ee:	4252      	negs	r2, r2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2203      	movs	r2, #3
 8002400:	4013      	ands	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fad8 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 800240c:	e007      	b.n	800241e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 facb 	bl	80029ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 fad7 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2204      	movs	r2, #4
 800242c:	4013      	ands	r3, r2
 800242e:	2b04      	cmp	r3, #4
 8002430:	d125      	bne.n	800247e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2204      	movs	r2, #4
 800243a:	4013      	ands	r3, r2
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11e      	bne.n	800247e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2205      	movs	r2, #5
 8002446:	4252      	negs	r2, r2
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 faab 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 8002466:	e007      	b.n	8002478 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fa9e 	bl	80029ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 faaa 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2208      	movs	r2, #8
 8002486:	4013      	ands	r3, r2
 8002488:	2b08      	cmp	r3, #8
 800248a:	d124      	bne.n	80024d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2208      	movs	r2, #8
 8002494:	4013      	ands	r3, r2
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11d      	bne.n	80024d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2209      	movs	r2, #9
 80024a0:	4252      	negs	r2, r2
 80024a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4013      	ands	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 fa7f 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 80024be:	e007      	b.n	80024d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fa72 	bl	80029ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 fa7e 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2210      	movs	r2, #16
 80024de:	4013      	ands	r3, r2
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d125      	bne.n	8002530 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2210      	movs	r2, #16
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d11e      	bne.n	8002530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2211      	movs	r2, #17
 80024f8:	4252      	negs	r2, r2
 80024fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2208      	movs	r2, #8
 8002500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	23c0      	movs	r3, #192	; 0xc0
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fa52 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 8002518:	e007      	b.n	800252a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0018      	movs	r0, r3
 800251e:	f000 fa45 	bl	80029ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f000 fa51 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2201      	movs	r2, #1
 8002538:	4013      	ands	r3, r2
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10f      	bne.n	800255e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	2b01      	cmp	r3, #1
 800254a:	d108      	bne.n	800255e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2202      	movs	r2, #2
 8002552:	4252      	negs	r2, r2
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f7fe f817 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	4013      	ands	r3, r2
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d10f      	bne.n	800258c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	4013      	ands	r3, r2
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d108      	bne.n	800258c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2281      	movs	r2, #129	; 0x81
 8002580:	4252      	negs	r2, r2
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 ff08 	bl	800339c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	401a      	ands	r2, r3
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	429a      	cmp	r2, r3
 800259e:	d10e      	bne.n	80025be <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d107      	bne.n	80025be <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_TIM_IRQHandler+0x260>)
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 fef7 	bl	80033ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d10f      	bne.n	80025ec <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d108      	bne.n	80025ec <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2241      	movs	r2, #65	; 0x41
 80025e0:	4252      	negs	r2, r2
 80025e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f9f8 	bl	80029dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2220      	movs	r2, #32
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d10f      	bne.n	800261a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	2b20      	cmp	r3, #32
 8002606:	d108      	bne.n	800261a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	4252      	negs	r2, r2
 8002610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f000 feb9 	bl	800338c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	fffffeff 	.word	0xfffffeff

08002628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	223c      	movs	r2, #60	; 0x3c
 8002638:	5c9b      	ldrb	r3, [r3, r2]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800263e:	2302      	movs	r3, #2
 8002640:	e0df      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	223c      	movs	r2, #60	; 0x3c
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b14      	cmp	r3, #20
 800264e:	d900      	bls.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002650:	e0d1      	b.n	80027f6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	009a      	lsls	r2, r3, #2
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	0011      	movs	r1, r2
 8002666:	0018      	movs	r0, r3
 8002668:	f000 fa2c 	bl	8002ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2108      	movs	r1, #8
 8002678:	430a      	orrs	r2, r1
 800267a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2104      	movs	r1, #4
 8002688:	438a      	bics	r2, r1
 800268a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6999      	ldr	r1, [r3, #24]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	619a      	str	r2, [r3, #24]
      break;
 800269e:	e0ab      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fa8b 	bl	8002bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0109      	lsls	r1, r1, #4
 80026bc:	430a      	orrs	r2, r1
 80026be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4951      	ldr	r1, [pc, #324]	; (8002810 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6999      	ldr	r1, [r3, #24]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	021a      	lsls	r2, r3, #8
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	619a      	str	r2, [r3, #24]
      break;
 80026e4:	e088      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	0011      	movs	r1, r2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 fae6 	bl	8002cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2108      	movs	r1, #8
 8002700:	430a      	orrs	r2, r1
 8002702:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2104      	movs	r1, #4
 8002710:	438a      	bics	r2, r1
 8002712:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69d9      	ldr	r1, [r3, #28]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	61da      	str	r2, [r3, #28]
      break;
 8002726:	e067      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f000 fb47 	bl	8002dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0109      	lsls	r1, r1, #4
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	492f      	ldr	r1, [pc, #188]	; (8002810 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002754:	400a      	ands	r2, r1
 8002756:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69d9      	ldr	r1, [r3, #28]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	021a      	lsls	r2, r3, #8
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	61da      	str	r2, [r3, #28]
      break;
 800276c:	e044      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	0011      	movs	r1, r2
 8002776:	0018      	movs	r0, r3
 8002778:	f000 fb88 	bl	8002e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2108      	movs	r1, #8
 8002788:	430a      	orrs	r2, r1
 800278a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2104      	movs	r1, #4
 8002798:	438a      	bics	r2, r1
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027ae:	e023      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fbc1 	bl	8002f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0109      	lsls	r1, r1, #4
 80027cc:	430a      	orrs	r2, r1
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	490d      	ldr	r1, [pc, #52]	; (8002810 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80027dc:	400a      	ands	r2, r1
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	021a      	lsls	r2, r3, #8
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027f4:	e000      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80027f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	223c      	movs	r2, #60	; 0x3c
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b004      	add	sp, #16
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	08004908 	.word	0x08004908
 8002810:	fffffbff 	.word	0xfffffbff

08002814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223c      	movs	r2, #60	; 0x3c
 8002822:	5c9b      	ldrb	r3, [r3, r2]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_TIM_ConfigClockSource+0x18>
 8002828:	2302      	movs	r3, #2
 800282a:	e0b7      	b.n	800299c <HAL_TIM_ConfigClockSource+0x188>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	223c      	movs	r2, #60	; 0x3c
 8002830:	2101      	movs	r1, #1
 8002832:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	223d      	movs	r2, #61	; 0x3d
 8002838:	2102      	movs	r1, #2
 800283a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a57      	ldr	r2, [pc, #348]	; (80029a4 <HAL_TIM_ConfigClockSource+0x190>)
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a56      	ldr	r2, [pc, #344]	; (80029a8 <HAL_TIM_ConfigClockSource+0x194>)
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0192      	lsls	r2, r2, #6
 8002864:	4293      	cmp	r3, r2
 8002866:	d040      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0xd6>
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	0192      	lsls	r2, r2, #6
 800286c:	4293      	cmp	r3, r2
 800286e:	d900      	bls.n	8002872 <HAL_TIM_ConfigClockSource+0x5e>
 8002870:	e088      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	0152      	lsls	r2, r2, #5
 8002876:	4293      	cmp	r3, r2
 8002878:	d100      	bne.n	800287c <HAL_TIM_ConfigClockSource+0x68>
 800287a:	e085      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	0152      	lsls	r2, r2, #5
 8002880:	4293      	cmp	r3, r2
 8002882:	d900      	bls.n	8002886 <HAL_TIM_ConfigClockSource+0x72>
 8002884:	e07e      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 8002886:	2b70      	cmp	r3, #112	; 0x70
 8002888:	d018      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0xa8>
 800288a:	d900      	bls.n	800288e <HAL_TIM_ConfigClockSource+0x7a>
 800288c:	e07a      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 800288e:	2b60      	cmp	r3, #96	; 0x60
 8002890:	d04f      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x11e>
 8002892:	d900      	bls.n	8002896 <HAL_TIM_ConfigClockSource+0x82>
 8002894:	e076      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 8002896:	2b50      	cmp	r3, #80	; 0x50
 8002898:	d03b      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xfe>
 800289a:	d900      	bls.n	800289e <HAL_TIM_ConfigClockSource+0x8a>
 800289c:	e072      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d057      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x13e>
 80028a2:	d900      	bls.n	80028a6 <HAL_TIM_ConfigClockSource+0x92>
 80028a4:	e06e      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 80028a6:	2b30      	cmp	r3, #48	; 0x30
 80028a8:	d063      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15e>
 80028aa:	d86b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d060      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15e>
 80028b0:	d868      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d05d      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15e>
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d05b      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028ba:	e063      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6899      	ldr	r1, [r3, #8]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f000 fc12 	bl	80030f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2277      	movs	r2, #119	; 0x77
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
      break;
 80028e8:	e04f      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f000 fbfb 	bl	80030f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	01c9      	lsls	r1, r1, #7
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e03b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	001a      	movs	r2, r3
 8002920:	f000 fb6c 	bl	8002ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2150      	movs	r1, #80	; 0x50
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fbc6 	bl	80030bc <TIM_ITRx_SetConfig>
      break;
 8002930:	e02b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	001a      	movs	r2, r3
 8002940:	f000 fb8a 	bl	8003058 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2160      	movs	r1, #96	; 0x60
 800294a:	0018      	movs	r0, r3
 800294c:	f000 fbb6 	bl	80030bc <TIM_ITRx_SetConfig>
      break;
 8002950:	e01b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	001a      	movs	r2, r3
 8002960:	f000 fb4c 	bl	8002ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fba6 	bl	80030bc <TIM_ITRx_SetConfig>
      break;
 8002970:	e00b      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0019      	movs	r1, r3
 800297c:	0010      	movs	r0, r2
 800297e:	f000 fb9d 	bl	80030bc <TIM_ITRx_SetConfig>
        break;
 8002982:	e002      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	e000      	b.n	800298a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002988:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	223d      	movs	r2, #61	; 0x3d
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	223c      	movs	r2, #60	; 0x3c
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffceff88 	.word	0xffceff88
 80029a8:	ffff00ff 	.word	0xffff00ff

080029ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <TIM_Base_SetConfig+0xc0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <TIM_Base_SetConfig+0x20>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <TIM_Base_SetConfig+0xc4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2270      	movs	r2, #112	; 0x70
 8002a10:	4393      	bics	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <TIM_Base_SetConfig+0xc0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00f      	beq.n	8002a46 <TIM_Base_SetConfig+0x5a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <TIM_Base_SetConfig+0xc4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00b      	beq.n	8002a46 <TIM_Base_SetConfig+0x5a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <TIM_Base_SetConfig+0xc8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <TIM_Base_SetConfig+0x5a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <TIM_Base_SetConfig+0xcc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d003      	beq.n	8002a46 <TIM_Base_SetConfig+0x5a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <TIM_Base_SetConfig+0xd0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d108      	bne.n	8002a58 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <TIM_Base_SetConfig+0xd4>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	001a      	movs	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <TIM_Base_SetConfig+0xc0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0xaa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <TIM_Base_SetConfig+0xcc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0xaa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <TIM_Base_SetConfig+0xd0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d103      	bne.n	8002a9e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	615a      	str	r2, [r3, #20]
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40002000 	.word	0x40002000
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	fffffcff 	.word	0xfffffcff

08002ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4393      	bics	r3, r2
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <TIM_OC1_SetConfig+0xe8>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2203      	movs	r2, #3
 8002afa:	4393      	bics	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <TIM_OC1_SetConfig+0xec>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_OC1_SetConfig+0x6e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <TIM_OC1_SetConfig+0xf0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_OC1_SetConfig+0x6e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <TIM_OC1_SetConfig+0xf4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10c      	bne.n	8002b4c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2208      	movs	r2, #8
 8002b36:	4393      	bics	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2204      	movs	r2, #4
 8002b48:	4393      	bics	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <TIM_OC1_SetConfig+0xec>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_OC1_SetConfig+0xa0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <TIM_OC1_SetConfig+0xf0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_OC1_SetConfig+0xa0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <TIM_OC1_SetConfig+0xf4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <TIM_OC1_SetConfig+0xf8>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <TIM_OC1_SetConfig+0xfc>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b006      	add	sp, #24
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	fffeff8f 	.word	0xfffeff8f
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	fffffeff 	.word	0xfffffeff
 8002bc0:	fffffdff 	.word	0xfffffdff

08002bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <TIM_OC2_SetConfig+0xe0>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <TIM_OC2_SetConfig+0xe4>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	4393      	bics	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <TIM_OC2_SetConfig+0xe8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10d      	bne.n	8002c42 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2240      	movs	r2, #64	; 0x40
 8002c3e:	4393      	bics	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <TIM_OC2_SetConfig+0xe8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <TIM_OC2_SetConfig+0x96>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <TIM_OC2_SetConfig+0xec>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_OC2_SetConfig+0x96>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <TIM_OC2_SetConfig+0xf0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d113      	bne.n	8002c82 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <TIM_OC2_SetConfig+0xf4>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <TIM_OC2_SetConfig+0xf8>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	621a      	str	r2, [r3, #32]
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	feff8fff 	.word	0xfeff8fff
 8002ca8:	fffffcff 	.word	0xfffffcff
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800
 8002cb8:	fffffbff 	.word	0xfffffbff
 8002cbc:	fffff7ff 	.word	0xfffff7ff

08002cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <TIM_OC3_SetConfig+0xdc>)
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <TIM_OC3_SetConfig+0xe0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	4393      	bics	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <TIM_OC3_SetConfig+0xe4>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <TIM_OC3_SetConfig+0xe8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10d      	bne.n	8002d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <TIM_OC3_SetConfig+0xec>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <TIM_OC3_SetConfig+0xf0>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <TIM_OC3_SetConfig+0xe8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <TIM_OC3_SetConfig+0x92>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <TIM_OC3_SetConfig+0xf4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_OC3_SetConfig+0x92>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <TIM_OC3_SetConfig+0xf8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d113      	bne.n	8002d7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <TIM_OC3_SetConfig+0xfc>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <TIM_OC3_SetConfig+0x100>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b006      	add	sp, #24
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	fffffeff 	.word	0xfffffeff
 8002da0:	fffeff8f 	.word	0xfffeff8f
 8002da4:	fffffdff 	.word	0xfffffdff
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	fffff7ff 	.word	0xfffff7ff
 8002db0:	fffffbff 	.word	0xfffffbff
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	ffffefff 	.word	0xffffefff
 8002dc0:	ffffdfff 	.word	0xffffdfff

08002dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <TIM_OC4_SetConfig+0xa8>)
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <TIM_OC4_SetConfig+0xac>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <TIM_OC4_SetConfig+0xb0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <TIM_OC4_SetConfig+0xb4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	031b      	lsls	r3, r3, #12
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <TIM_OC4_SetConfig+0xb8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_OC4_SetConfig+0x70>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <TIM_OC4_SetConfig+0xbc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_OC4_SetConfig+0x70>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <TIM_OC4_SetConfig+0xc0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d109      	bne.n	8002e48 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <TIM_OC4_SetConfig+0xc4>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	019b      	lsls	r3, r3, #6
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b006      	add	sp, #24
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	ffffefff 	.word	0xffffefff
 8002e70:	feff8fff 	.word	0xfeff8fff
 8002e74:	fffffcff 	.word	0xfffffcff
 8002e78:	ffffdfff 	.word	0xffffdfff
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	ffffbfff 	.word	0xffffbfff

08002e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <TIM_OC5_SetConfig+0x9c>)
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <TIM_OC5_SetConfig+0xa0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <TIM_OC5_SetConfig+0xa4>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <TIM_OC5_SetConfig+0xa8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_OC5_SetConfig+0x66>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <TIM_OC5_SetConfig+0xac>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_OC5_SetConfig+0x66>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <TIM_OC5_SetConfig+0xb0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d109      	bne.n	8002f06 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <TIM_OC5_SetConfig+0x9c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	621a      	str	r2, [r3, #32]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b006      	add	sp, #24
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	fffeffff 	.word	0xfffeffff
 8002f2c:	fffeff8f 	.word	0xfffeff8f
 8002f30:	fffdffff 	.word	0xfffdffff
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <TIM_OC6_SetConfig+0xa0>)
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <TIM_OC6_SetConfig+0xa4>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <TIM_OC6_SetConfig+0xa8>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	051b      	lsls	r3, r3, #20
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <TIM_OC6_SetConfig+0xac>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_OC6_SetConfig+0x68>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <TIM_OC6_SetConfig+0xb0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_OC6_SetConfig+0x68>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <TIM_OC6_SetConfig+0xb4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d109      	bne.n	8002fbc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <TIM_OC6_SetConfig+0xb8>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	029b      	lsls	r3, r3, #10
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b006      	add	sp, #24
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	ffefffff 	.word	0xffefffff
 8002fe4:	feff8fff 	.word	0xfeff8fff
 8002fe8:	ffdfffff 	.word	0xffdfffff
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40014400 	.word	0x40014400
 8002ff4:	40014800 	.word	0x40014800
 8002ff8:	fffbffff 	.word	0xfffbffff

08002ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	2201      	movs	r2, #1
 8003014:	4393      	bics	r3, r2
 8003016:	001a      	movs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	22f0      	movs	r2, #240	; 0xf0
 8003026:	4393      	bics	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	220a      	movs	r2, #10
 8003038:	4393      	bics	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}

08003058 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	2210      	movs	r2, #16
 800306a:	4393      	bics	r3, r2
 800306c:	001a      	movs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <TIM_TI2_ConfigInputStage+0x60>)
 8003082:	4013      	ands	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	031b      	lsls	r3, r3, #12
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	22a0      	movs	r2, #160	; 0xa0
 8003094:	4393      	bics	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b006      	add	sp, #24
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	ffff0fff 	.word	0xffff0fff

080030bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <TIM_ITRx_SetConfig+0x34>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	2207      	movs	r2, #7
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	609a      	str	r2, [r3, #8]
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b004      	add	sp, #16
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	ffcfff8f 	.word	0xffcfff8f

080030f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <TIM_ETR_SetConfig+0x3c>)
 800310c:	4013      	ands	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	431a      	orrs	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}
 8003130:	ffff00ff 	.word	0xffff00ff

08003134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	221f      	movs	r2, #31
 8003144:	4013      	ands	r3, r2
 8003146:	2201      	movs	r2, #1
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	43d2      	mvns	r2, r2
 8003156:	401a      	ands	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	211f      	movs	r1, #31
 8003164:	400b      	ands	r3, r1
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4099      	lsls	r1, r3
 800316a:	000b      	movs	r3, r1
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b006      	add	sp, #24
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	223c      	movs	r2, #60	; 0x3c
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e04a      	b.n	800322a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	223c      	movs	r2, #60	; 0x3c
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	223d      	movs	r2, #61	; 0x3d
 80031a0:	2102      	movs	r1, #2
 80031a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2270      	movs	r2, #112	; 0x70
 80031d4:	4393      	bics	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10c      	bne.n	8003218 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	4393      	bics	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	223d      	movs	r2, #61	; 0x3d
 800321c:	2101      	movs	r1, #1
 800321e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	223c      	movs	r2, #60	; 0x3c
 8003224:	2100      	movs	r1, #0
 8003226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b004      	add	sp, #16
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	40012c00 	.word	0x40012c00
 8003238:	ff0fffff 	.word	0xff0fffff
 800323c:	40000400 	.word	0x40000400

08003240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223c      	movs	r2, #60	; 0x3c
 8003252:	5c9b      	ldrb	r3, [r3, r2]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e079      	b.n	8003350 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	223c      	movs	r2, #60	; 0x3c
 8003260:	2101      	movs	r1, #1
 8003262:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	22ff      	movs	r2, #255	; 0xff
 8003268:	4393      	bics	r3, r2
 800326a:	001a      	movs	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a38      	ldr	r2, [pc, #224]	; (8003358 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003278:	401a      	ands	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a35      	ldr	r2, [pc, #212]	; (800335c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003286:	401a      	ands	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a33      	ldr	r2, [pc, #204]	; (8003360 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003294:	401a      	ands	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a30      	ldr	r2, [pc, #192]	; (8003364 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80032a2:	401a      	ands	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80032b0:	401a      	ands	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	; (800336c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80032be:	401a      	ands	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a29      	ldr	r2, [pc, #164]	; (8003370 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80032cc:	401a      	ands	r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d106      	bne.n	80032f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80032e6:	401a      	ands	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d121      	bne.n	800333e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a1f      	ldr	r2, [pc, #124]	; (800337c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80032fe:	401a      	ands	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	051b      	lsls	r3, r3, #20
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800330e:	401a      	ands	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800331c:	401a      	ands	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d106      	bne.n	800333e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003334:	401a      	ands	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223c      	movs	r2, #60	; 0x3c
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b004      	add	sp, #16
 8003356:	bd80      	pop	{r7, pc}
 8003358:	fffffcff 	.word	0xfffffcff
 800335c:	fffffbff 	.word	0xfffffbff
 8003360:	fffff7ff 	.word	0xfffff7ff
 8003364:	ffffefff 	.word	0xffffefff
 8003368:	ffffdfff 	.word	0xffffdfff
 800336c:	ffffbfff 	.word	0xffffbfff
 8003370:	fff0ffff 	.word	0xfff0ffff
 8003374:	40012c00 	.word	0x40012c00
 8003378:	efffffff 	.word	0xefffffff
 800337c:	ff0fffff 	.word	0xff0fffff
 8003380:	feffffff 	.word	0xfeffffff
 8003384:	fdffffff 	.word	0xfdffffff
 8003388:	dfffffff 	.word	0xdfffffff

0800338c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e046      	b.n	800345c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2284      	movs	r2, #132	; 0x84
 80033d2:	589b      	ldr	r3, [r3, r2]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	2100      	movs	r1, #0
 80033de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fbea 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2284      	movs	r2, #132	; 0x84
 80033ec:	2124      	movs	r1, #36	; 0x24
 80033ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2101      	movs	r1, #1
 80033fc:	438a      	bics	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fac6 	bl	8003994 <UART_SetConfig>
 8003408:	0003      	movs	r3, r0
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e024      	b.n	800345c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0018      	movs	r0, r3
 800341e:	f000 fc29 	bl	8003c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	490d      	ldr	r1, [pc, #52]	; (8003464 <HAL_UART_Init+0xa8>)
 800342e:	400a      	ands	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	212a      	movs	r1, #42	; 0x2a
 800343e:	438a      	bics	r2, r1
 8003440:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2101      	movs	r1, #1
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 fcc1 	bl	8003ddc <UART_CheckIdleState>
 800345a:	0003      	movs	r3, r0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}
 8003464:	ffffb7ff 	.word	0xffffb7ff

08003468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	1dbb      	adds	r3, r7, #6
 8003474:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2288      	movs	r2, #136	; 0x88
 800347a:	589b      	ldr	r3, [r3, r2]
 800347c:	2b20      	cmp	r3, #32
 800347e:	d12f      	bne.n	80034e0 <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_UART_Receive_IT+0x26>
 8003486:	1dbb      	adds	r3, r7, #6
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e027      	b.n	80034e2 <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	015b      	lsls	r3, r3, #5
 800349a:	429a      	cmp	r2, r3
 800349c:	d109      	bne.n	80034b2 <HAL_UART_Receive_IT+0x4a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d001      	beq.n	80034b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e017      	b.n	80034e2 <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Receive_IT+0x58>
 80034bc:	2302      	movs	r3, #2
 80034be:	e010      	b.n	80034e2 <HAL_UART_Receive_IT+0x7a>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 80034ce:	1dbb      	adds	r3, r7, #6
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 fd4c 	bl	8003f74 <UART_Start_Receive_IT>
 80034dc:	0003      	movs	r3, r0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4abb      	ldr	r2, [pc, #748]	; (80037fc <HAL_UART_IRQHandler+0x310>)
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d117      	bne.n	800354a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	2220      	movs	r2, #32
 800351e:	4013      	ands	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2220      	movs	r2, #32
 8003526:	4013      	ands	r3, r2
 8003528:	d104      	bne.n	8003534 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	055b      	lsls	r3, r3, #21
 8003530:	4013      	ands	r3, r2
 8003532:	d00a      	beq.n	800354a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	2b00      	cmp	r3, #0
 800353a:	d100      	bne.n	800353e <HAL_UART_IRQHandler+0x52>
 800353c:	e1fd      	b.n	800393a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	0010      	movs	r0, r2
 8003546:	4798      	blx	r3
      }
      return;
 8003548:	e1f7      	b.n	800393a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d100      	bne.n	8003552 <HAL_UART_IRQHandler+0x66>
 8003550:	e0de      	b.n	8003710 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4aaa      	ldr	r2, [pc, #680]	; (8003800 <HAL_UART_IRQHandler+0x314>)
 8003556:	4013      	ands	r3, r2
 8003558:	d104      	bne.n	8003564 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4aa9      	ldr	r2, [pc, #676]	; (8003804 <HAL_UART_IRQHandler+0x318>)
 800355e:	4013      	ands	r3, r2
 8003560:	d100      	bne.n	8003564 <HAL_UART_IRQHandler+0x78>
 8003562:	e0d5      	b.n	8003710 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	d010      	beq.n	800358e <HAL_UART_IRQHandler+0xa2>
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4013      	ands	r3, r2
 8003574:	d00b      	beq.n	800358e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2201      	movs	r2, #1
 800357c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	228c      	movs	r2, #140	; 0x8c
 8003582:	589b      	ldr	r3, [r3, r2]
 8003584:	2201      	movs	r2, #1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	218c      	movs	r1, #140	; 0x8c
 800358c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2202      	movs	r2, #2
 8003592:	4013      	ands	r3, r2
 8003594:	d00f      	beq.n	80035b6 <HAL_UART_IRQHandler+0xca>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2202      	movs	r2, #2
 80035a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	228c      	movs	r2, #140	; 0x8c
 80035aa:	589b      	ldr	r3, [r3, r2]
 80035ac:	2204      	movs	r2, #4
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	218c      	movs	r1, #140	; 0x8c
 80035b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2204      	movs	r2, #4
 80035ba:	4013      	ands	r3, r2
 80035bc:	d00f      	beq.n	80035de <HAL_UART_IRQHandler+0xf2>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2201      	movs	r2, #1
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00b      	beq.n	80035de <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	228c      	movs	r2, #140	; 0x8c
 80035d2:	589b      	ldr	r3, [r3, r2]
 80035d4:	2202      	movs	r2, #2
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	218c      	movs	r1, #140	; 0x8c
 80035dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2208      	movs	r2, #8
 80035e2:	4013      	ands	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2220      	movs	r2, #32
 80035ea:	4013      	ands	r3, r2
 80035ec:	d103      	bne.n	80035f6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a83      	ldr	r2, [pc, #524]	; (8003800 <HAL_UART_IRQHandler+0x314>)
 80035f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2208      	movs	r2, #8
 80035fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	228c      	movs	r2, #140	; 0x8c
 8003602:	589b      	ldr	r3, [r3, r2]
 8003604:	2208      	movs	r2, #8
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	218c      	movs	r1, #140	; 0x8c
 800360c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	4013      	ands	r3, r2
 8003616:	d011      	beq.n	800363c <HAL_UART_IRQHandler+0x150>
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	04db      	lsls	r3, r3, #19
 800361e:	4013      	ands	r3, r2
 8003620:	d00c      	beq.n	800363c <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	228c      	movs	r2, #140	; 0x8c
 8003630:	589b      	ldr	r3, [r3, r2]
 8003632:	2220      	movs	r2, #32
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	218c      	movs	r1, #140	; 0x8c
 800363a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	228c      	movs	r2, #140	; 0x8c
 8003640:	589b      	ldr	r3, [r3, r2]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d100      	bne.n	8003648 <HAL_UART_IRQHandler+0x15c>
 8003646:	e17a      	b.n	800393e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2220      	movs	r2, #32
 800364c:	4013      	ands	r3, r2
 800364e:	d011      	beq.n	8003674 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2220      	movs	r2, #32
 8003654:	4013      	ands	r3, r2
 8003656:	d104      	bne.n	8003662 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	055b      	lsls	r3, r3, #21
 800365e:	4013      	ands	r3, r2
 8003660:	d008      	beq.n	8003674 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	0010      	movs	r0, r2
 8003672:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	228c      	movs	r2, #140	; 0x8c
 8003678:	589b      	ldr	r3, [r3, r2]
 800367a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	4013      	ands	r3, r2
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2228      	movs	r2, #40	; 0x28
 800368e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003690:	d033      	beq.n	80036fa <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f000 fd35 	bl	8004104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d123      	bne.n	80036f0 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2140      	movs	r1, #64	; 0x40
 80036b4:	438a      	bics	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c4:	4a50      	ldr	r2, [pc, #320]	; (8003808 <HAL_UART_IRQHandler+0x31c>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd fcd3 	bl	8001078 <HAL_DMA_Abort_IT>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d01a      	beq.n	800370c <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e0:	0018      	movs	r0, r3
 80036e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e012      	b.n	800370c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 f93f 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ee:	e00d      	b.n	800370c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f93a 	bl	800396c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	e008      	b.n	800370c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 f935 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	228c      	movs	r2, #140	; 0x8c
 8003706:	2100      	movs	r1, #0
 8003708:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800370a:	e118      	b.n	800393e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	46c0      	nop			; (mov r8, r8)
    return;
 800370e:	e116      	b.n	800393e <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d000      	beq.n	800371a <HAL_UART_IRQHandler+0x22e>
 8003718:	e0bb      	b.n	8003892 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2210      	movs	r2, #16
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_UART_IRQHandler+0x238>
 8003722:	e0b6      	b.n	8003892 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2210      	movs	r2, #16
 8003728:	4013      	ands	r3, r2
 800372a:	d100      	bne.n	800372e <HAL_UART_IRQHandler+0x242>
 800372c:	e0b1      	b.n	8003892 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2210      	movs	r2, #16
 8003734:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	4013      	ands	r3, r2
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d165      	bne.n	8003810 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	2108      	movs	r1, #8
 800374e:	187b      	adds	r3, r7, r1
 8003750:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8003752:	187b      	adds	r3, r7, r1
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d100      	bne.n	800375c <HAL_UART_IRQHandler+0x270>
 800375a:	e0f2      	b.n	8003942 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	225c      	movs	r2, #92	; 0x5c
 8003760:	5a9b      	ldrh	r3, [r3, r2]
 8003762:	187a      	adds	r2, r7, r1
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d300      	bcc.n	800376c <HAL_UART_IRQHandler+0x280>
 800376a:	e0ea      	b.n	8003942 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	187a      	adds	r2, r7, r1
 8003770:	215e      	movs	r1, #94	; 0x5e
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2220      	movs	r2, #32
 8003780:	4013      	ands	r3, r2
 8003782:	d12b      	bne.n	80037dc <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	491f      	ldr	r1, [pc, #124]	; (800380c <HAL_UART_IRQHandler+0x320>)
 8003790:	400a      	ands	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2101      	movs	r1, #1
 80037a0:	438a      	bics	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2140      	movs	r1, #64	; 0x40
 80037b0:	438a      	bics	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2288      	movs	r2, #136	; 0x88
 80037b8:	2120      	movs	r1, #32
 80037ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2110      	movs	r1, #16
 80037ce:	438a      	bics	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7fd fbec 	bl	8000fb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	225c      	movs	r2, #92	; 0x5c
 80037e0:	5a9a      	ldrh	r2, [r3, r2]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	215e      	movs	r1, #94	; 0x5e
 80037e6:	5a5b      	ldrh	r3, [r3, r1]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0011      	movs	r1, r2
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f8c2 	bl	800397c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037f8:	e0a3      	b.n	8003942 <HAL_UART_IRQHandler+0x456>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	0000080f 	.word	0x0000080f
 8003800:	10000001 	.word	0x10000001
 8003804:	04000120 	.word	0x04000120
 8003808:	08004169 	.word	0x08004169
 800380c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	225c      	movs	r2, #92	; 0x5c
 8003814:	5a99      	ldrh	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	225e      	movs	r2, #94	; 0x5e
 800381a:	5a9b      	ldrh	r3, [r3, r2]
 800381c:	b29a      	uxth	r2, r3
 800381e:	200a      	movs	r0, #10
 8003820:	183b      	adds	r3, r7, r0
 8003822:	1a8a      	subs	r2, r1, r2
 8003824:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	225e      	movs	r2, #94	; 0x5e
 800382a:	5a9b      	ldrh	r3, [r3, r2]
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d100      	bne.n	8003834 <HAL_UART_IRQHandler+0x348>
 8003832:	e088      	b.n	8003946 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8003834:	183b      	adds	r3, r7, r0
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d100      	bne.n	800383e <HAL_UART_IRQHandler+0x352>
 800383c:	e083      	b.n	8003946 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4942      	ldr	r1, [pc, #264]	; (8003954 <HAL_UART_IRQHandler+0x468>)
 800384a:	400a      	ands	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	493f      	ldr	r1, [pc, #252]	; (8003958 <HAL_UART_IRQHandler+0x46c>)
 800385a:	400a      	ands	r2, r1
 800385c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2288      	movs	r2, #136	; 0x88
 8003862:	2120      	movs	r1, #32
 8003864:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2110      	movs	r1, #16
 800387e:	438a      	bics	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003882:	183b      	adds	r3, r7, r0
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f000 f876 	bl	800397c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003890:	e059      	b.n	8003946 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	035b      	lsls	r3, r3, #13
 8003898:	4013      	ands	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_UART_IRQHandler+0x3ce>
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	03db      	lsls	r3, r3, #15
 80038a2:	4013      	ands	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	0352      	lsls	r2, r2, #13
 80038ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 ff9a 	bl	80047ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038b8:	e048      	b.n	800394c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	4013      	ands	r3, r2
 80038c0:	d012      	beq.n	80038e8 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	4013      	ands	r3, r2
 80038c8:	d104      	bne.n	80038d4 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	4013      	ands	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d036      	beq.n	800394a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	0010      	movs	r0, r2
 80038e4:	4798      	blx	r3
    }
    return;
 80038e6:	e030      	b.n	800394a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	4013      	ands	r3, r2
 80038ee:	d008      	beq.n	8003902 <HAL_UART_IRQHandler+0x416>
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	4013      	ands	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fc4b 	bl	8004196 <UART_EndTransmit_IT>
    return;
 8003900:	e024      	b.n	800394c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	4013      	ands	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_UART_IRQHandler+0x434>
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	05db      	lsls	r3, r3, #23
 8003912:	4013      	ands	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f000 ff77 	bl	800480c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800391e:	e015      	b.n	800394c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	045b      	lsls	r3, r3, #17
 8003926:	4013      	ands	r3, r2
 8003928:	d010      	beq.n	800394c <HAL_UART_IRQHandler+0x460>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0d      	bge.n	800394c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 ff62 	bl	80047fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003938:	e008      	b.n	800394c <HAL_UART_IRQHandler+0x460>
      return;
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	e006      	b.n	800394c <HAL_UART_IRQHandler+0x460>
    return;
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	e004      	b.n	800394c <HAL_UART_IRQHandler+0x460>
      return;
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	e002      	b.n	800394c <HAL_UART_IRQHandler+0x460>
      return;
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	e000      	b.n	800394c <HAL_UART_IRQHandler+0x460>
    return;
 800394a:	46c0      	nop			; (mov r8, r8)
  }
}
 800394c:	46bd      	mov	sp, r7
 800394e:	b008      	add	sp, #32
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	fffffedf 	.word	0xfffffedf
 8003958:	effffffe 	.word	0xeffffffe

0800395c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	000a      	movs	r2, r1
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800399c:	231a      	movs	r3, #26
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4aa1      	ldr	r2, [pc, #644]	; (8003c54 <UART_SetConfig+0x2c0>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a9d      	ldr	r2, [pc, #628]	; (8003c58 <UART_SetConfig+0x2c4>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4a94      	ldr	r2, [pc, #592]	; (8003c5c <UART_SetConfig+0x2c8>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	220f      	movs	r2, #15
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a8a      	ldr	r2, [pc, #552]	; (8003c60 <UART_SetConfig+0x2cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d127      	bne.n	8003a8c <UART_SetConfig+0xf8>
 8003a3c:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <UART_SetConfig+0x2d0>)
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	2203      	movs	r2, #3
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d017      	beq.n	8003a78 <UART_SetConfig+0xe4>
 8003a48:	d81b      	bhi.n	8003a82 <UART_SetConfig+0xee>
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d00a      	beq.n	8003a64 <UART_SetConfig+0xd0>
 8003a4e:	d818      	bhi.n	8003a82 <UART_SetConfig+0xee>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <UART_SetConfig+0xc6>
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d00a      	beq.n	8003a6e <UART_SetConfig+0xda>
 8003a58:	e013      	b.n	8003a82 <UART_SetConfig+0xee>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e021      	b.n	8003aa8 <UART_SetConfig+0x114>
 8003a64:	231b      	movs	r3, #27
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	2202      	movs	r2, #2
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e01c      	b.n	8003aa8 <UART_SetConfig+0x114>
 8003a6e:	231b      	movs	r3, #27
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2204      	movs	r2, #4
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e017      	b.n	8003aa8 <UART_SetConfig+0x114>
 8003a78:	231b      	movs	r3, #27
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e012      	b.n	8003aa8 <UART_SetConfig+0x114>
 8003a82:	231b      	movs	r3, #27
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2210      	movs	r2, #16
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	e00d      	b.n	8003aa8 <UART_SetConfig+0x114>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <UART_SetConfig+0x2d4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d104      	bne.n	8003aa0 <UART_SetConfig+0x10c>
 8003a96:	231b      	movs	r3, #27
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e003      	b.n	8003aa8 <UART_SetConfig+0x114>
 8003aa0:	231b      	movs	r3, #27
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d000      	beq.n	8003ab6 <UART_SetConfig+0x122>
 8003ab4:	e066      	b.n	8003b84 <UART_SetConfig+0x1f0>
  {
    switch (clocksource)
 8003ab6:	231b      	movs	r3, #27
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d015      	beq.n	8003aec <UART_SetConfig+0x158>
 8003ac0:	dc18      	bgt.n	8003af4 <UART_SetConfig+0x160>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d00d      	beq.n	8003ae2 <UART_SetConfig+0x14e>
 8003ac6:	dc15      	bgt.n	8003af4 <UART_SetConfig+0x160>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <UART_SetConfig+0x13e>
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d005      	beq.n	8003adc <UART_SetConfig+0x148>
 8003ad0:	e010      	b.n	8003af4 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad2:	f7fe f9cf 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	617b      	str	r3, [r7, #20]
        break;
 8003ada:	e012      	b.n	8003b02 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003adc:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <UART_SetConfig+0x2d8>)
 8003ade:	617b      	str	r3, [r7, #20]
        break;
 8003ae0:	e00f      	b.n	8003b02 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae2:	f7fe f93b 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	617b      	str	r3, [r7, #20]
        break;
 8003aea:	e00a      	b.n	8003b02 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	617b      	str	r3, [r7, #20]
        break;
 8003af2:	e006      	b.n	8003b02 <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003af8:	231a      	movs	r3, #26
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
        break;
 8003b00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d100      	bne.n	8003b0a <UART_SetConfig+0x176>
 8003b08:	e08e      	b.n	8003c28 <UART_SetConfig+0x294>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0e:	4b58      	ldr	r3, [pc, #352]	; (8003c70 <UART_SetConfig+0x2dc>)
 8003b10:	0052      	lsls	r2, r2, #1
 8003b12:	5ad3      	ldrh	r3, [r2, r3]
 8003b14:	0019      	movs	r1, r3
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7fc faf2 	bl	8000100 <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	005a      	lsls	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	18d2      	adds	r2, r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	0010      	movs	r0, r2
 8003b30:	f7fc fae6 	bl	8000100 <__udivsi3>
 8003b34:	0003      	movs	r3, r0
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d91c      	bls.n	8003b7a <UART_SetConfig+0x1e6>
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	025b      	lsls	r3, r3, #9
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d217      	bcs.n	8003b7a <UART_SetConfig+0x1e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	200e      	movs	r0, #14
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	210f      	movs	r1, #15
 8003b54:	438a      	bics	r2, r1
 8003b56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2207      	movs	r2, #7
 8003b60:	4013      	ands	r3, r2
 8003b62:	b299      	uxth	r1, r3
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	183a      	adds	r2, r7, r0
 8003b68:	8812      	ldrh	r2, [r2, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	183a      	adds	r2, r7, r0
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e056      	b.n	8003c28 <UART_SetConfig+0x294>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7a:	231a      	movs	r3, #26
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e051      	b.n	8003c28 <UART_SetConfig+0x294>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b84:	231b      	movs	r3, #27
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d015      	beq.n	8003bba <UART_SetConfig+0x226>
 8003b8e:	dc18      	bgt.n	8003bc2 <UART_SetConfig+0x22e>
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d00d      	beq.n	8003bb0 <UART_SetConfig+0x21c>
 8003b94:	dc15      	bgt.n	8003bc2 <UART_SetConfig+0x22e>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <UART_SetConfig+0x20c>
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d005      	beq.n	8003baa <UART_SetConfig+0x216>
 8003b9e:	e010      	b.n	8003bc2 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f7fe f968 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	617b      	str	r3, [r7, #20]
        break;
 8003ba8:	e012      	b.n	8003bd0 <UART_SetConfig+0x23c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <UART_SetConfig+0x2d8>)
 8003bac:	617b      	str	r3, [r7, #20]
        break;
 8003bae:	e00f      	b.n	8003bd0 <UART_SetConfig+0x23c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb0:	f7fe f8d4 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	617b      	str	r3, [r7, #20]
        break;
 8003bb8:	e00a      	b.n	8003bd0 <UART_SetConfig+0x23c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	617b      	str	r3, [r7, #20]
        break;
 8003bc0:	e006      	b.n	8003bd0 <UART_SetConfig+0x23c>
      default:
        pclk = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bc6:	231a      	movs	r3, #26
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
        break;
 8003bce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d028      	beq.n	8003c28 <UART_SetConfig+0x294>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <UART_SetConfig+0x2dc>)
 8003bdc:	0052      	lsls	r2, r2, #1
 8003bde:	5ad3      	ldrh	r3, [r2, r3]
 8003be0:	0019      	movs	r1, r3
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7fc fa8c 	bl	8000100 <__udivsi3>
 8003be8:	0003      	movs	r3, r0
 8003bea:	001a      	movs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	18d2      	adds	r2, r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	0010      	movs	r0, r2
 8003bfc:	f7fc fa80 	bl	8000100 <__udivsi3>
 8003c00:	0003      	movs	r3, r0
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b0f      	cmp	r3, #15
 8003c0a:	d909      	bls.n	8003c20 <UART_SetConfig+0x28c>
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	025b      	lsls	r3, r3, #9
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d204      	bcs.n	8003c20 <UART_SetConfig+0x28c>
      {
        huart->Instance->BRR = usartdiv;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	e003      	b.n	8003c28 <UART_SetConfig+0x294>
      }
      else
      {
        ret = HAL_ERROR;
 8003c20:	231a      	movs	r3, #26
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	226a      	movs	r2, #106	; 0x6a
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2268      	movs	r2, #104	; 0x68
 8003c34:	2101      	movs	r1, #1
 8003c36:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c44:	231a      	movs	r3, #26
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	781b      	ldrb	r3, [r3, #0]
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b008      	add	sp, #32
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	cfff69f3 	.word	0xcfff69f3
 8003c58:	ffffcfff 	.word	0xffffcfff
 8003c5c:	11fff4ff 	.word	0x11fff4ff
 8003c60:	40013800 	.word	0x40013800
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	00f42400 	.word	0x00f42400
 8003c70:	0800495c 	.word	0x0800495c

08003c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2201      	movs	r2, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	; (8003db8 <UART_AdvFeatureConfig+0x144>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a43      	ldr	r2, [pc, #268]	; (8003dbc <UART_AdvFeatureConfig+0x148>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d00b      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a3b      	ldr	r2, [pc, #236]	; (8003dc0 <UART_AdvFeatureConfig+0x14c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <UART_AdvFeatureConfig+0x150>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	2210      	movs	r2, #16
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <UART_AdvFeatureConfig+0x154>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <UART_AdvFeatureConfig+0x158>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	2240      	movs	r2, #64	; 0x40
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <UART_AdvFeatureConfig+0x15c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	035b      	lsls	r3, r3, #13
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d10b      	bne.n	8003d8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <UART_AdvFeatureConfig+0x160>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	4013      	ands	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <UART_AdvFeatureConfig+0x164>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	fffdffff 	.word	0xfffdffff
 8003dbc:	fffeffff 	.word	0xfffeffff
 8003dc0:	fffbffff 	.word	0xfffbffff
 8003dc4:	ffff7fff 	.word	0xffff7fff
 8003dc8:	ffffefff 	.word	0xffffefff
 8003dcc:	ffffdfff 	.word	0xffffdfff
 8003dd0:	ffefffff 	.word	0xffefffff
 8003dd4:	ff9fffff 	.word	0xff9fffff
 8003dd8:	fff7ffff 	.word	0xfff7ffff

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	228c      	movs	r2, #140	; 0x8c
 8003de8:	2100      	movs	r1, #0
 8003dea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fc ffd6 	bl	8000d9c <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d10c      	bne.n	8003e1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	0391      	lsls	r1, r2, #14
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <UART_CheckIdleState+0x90>)
 8003e0c:	9200      	str	r2, [sp, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f000 f82e 	bl	8003e70 <UART_WaitOnFlagUntilTimeout>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d001      	beq.n	8003e1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e023      	b.n	8003e64 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2204      	movs	r2, #4
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d10c      	bne.n	8003e44 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	03d1      	lsls	r1, r2, #15
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <UART_CheckIdleState+0x90>)
 8003e34:	9200      	str	r2, [sp, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f000 f81a 	bl	8003e70 <UART_WaitOnFlagUntilTimeout>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d001      	beq.n	8003e44 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e00f      	b.n	8003e64 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2284      	movs	r2, #132	; 0x84
 8003e48:	2120      	movs	r1, #32
 8003e4a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2288      	movs	r2, #136	; 0x88
 8003e50:	2120      	movs	r1, #32
 8003e52:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	01ffffff 	.word	0x01ffffff

08003e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e80:	e062      	b.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3301      	adds	r3, #1
 8003e86:	d05f      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e88:	f7fc ff88 	bl	8000d9c <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11d      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4931      	ldr	r1, [pc, #196]	; (8003f70 <UART_WaitOnFlagUntilTimeout+0x100>)
 8003eaa:	400a      	ands	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	438a      	bics	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2284      	movs	r2, #132	; 0x84
 8003ec2:	2120      	movs	r1, #32
 8003ec4:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2288      	movs	r2, #136	; 0x88
 8003eca:	2120      	movs	r1, #32
 8003ecc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e046      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d030      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d126      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	0112      	lsls	r2, r2, #4
 8003f02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4918      	ldr	r1, [pc, #96]	; (8003f70 <UART_WaitOnFlagUntilTimeout+0x100>)
 8003f10:	400a      	ands	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2101      	movs	r1, #1
 8003f20:	438a      	bics	r2, r1
 8003f22:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2284      	movs	r2, #132	; 0x84
 8003f28:	2120      	movs	r1, #32
 8003f2a:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2288      	movs	r2, #136	; 0x88
 8003f30:	2120      	movs	r1, #32
 8003f32:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	228c      	movs	r2, #140	; 0x8c
 8003f38:	2120      	movs	r1, #32
 8003f3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2280      	movs	r2, #128	; 0x80
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e00f      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4013      	ands	r3, r2
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	425a      	negs	r2, r3
 8003f58:	4153      	adcs	r3, r2
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	1dfb      	adds	r3, r7, #7
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d08d      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	fffffe5f 	.word	0xfffffe5f

08003f74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	1dbb      	adds	r3, r7, #6
 8003f80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1dba      	adds	r2, r7, #6
 8003f8c:	215c      	movs	r1, #92	; 0x5c
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1dba      	adds	r2, r7, #6
 8003f96:	215e      	movs	r1, #94	; 0x5e
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	015b      	lsls	r3, r3, #5
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10d      	bne.n	8003fca <UART_Start_Receive_IT+0x56>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <UART_Start_Receive_IT+0x4c>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2260      	movs	r2, #96	; 0x60
 8003fba:	494d      	ldr	r1, [pc, #308]	; (80040f0 <UART_Start_Receive_IT+0x17c>)
 8003fbc:	5299      	strh	r1, [r3, r2]
 8003fbe:	e02e      	b.n	800401e <UART_Start_Receive_IT+0xaa>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2260      	movs	r2, #96	; 0x60
 8003fc4:	21ff      	movs	r1, #255	; 0xff
 8003fc6:	5299      	strh	r1, [r3, r2]
 8003fc8:	e029      	b.n	800401e <UART_Start_Receive_IT+0xaa>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <UART_Start_Receive_IT+0x7a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <UART_Start_Receive_IT+0x70>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2260      	movs	r2, #96	; 0x60
 8003fde:	21ff      	movs	r1, #255	; 0xff
 8003fe0:	5299      	strh	r1, [r3, r2]
 8003fe2:	e01c      	b.n	800401e <UART_Start_Receive_IT+0xaa>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2260      	movs	r2, #96	; 0x60
 8003fe8:	217f      	movs	r1, #127	; 0x7f
 8003fea:	5299      	strh	r1, [r3, r2]
 8003fec:	e017      	b.n	800401e <UART_Start_Receive_IT+0xaa>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	055b      	lsls	r3, r3, #21
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10d      	bne.n	8004016 <UART_Start_Receive_IT+0xa2>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <UART_Start_Receive_IT+0x98>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2260      	movs	r2, #96	; 0x60
 8004006:	217f      	movs	r1, #127	; 0x7f
 8004008:	5299      	strh	r1, [r3, r2]
 800400a:	e008      	b.n	800401e <UART_Start_Receive_IT+0xaa>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2260      	movs	r2, #96	; 0x60
 8004010:	213f      	movs	r1, #63	; 0x3f
 8004012:	5299      	strh	r1, [r3, r2]
 8004014:	e003      	b.n	800401e <UART_Start_Receive_IT+0xaa>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2260      	movs	r2, #96	; 0x60
 800401a:	2100      	movs	r1, #0
 800401c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	228c      	movs	r2, #140	; 0x8c
 8004022:	2100      	movs	r1, #0
 8004024:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2288      	movs	r2, #136	; 0x88
 800402a:	2122      	movs	r1, #34	; 0x22
 800402c:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	430a      	orrs	r2, r1
 800403c:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	059b      	lsls	r3, r3, #22
 8004046:	429a      	cmp	r2, r3
 8004048:	d12e      	bne.n	80040a8 <UART_Start_Receive_IT+0x134>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2268      	movs	r2, #104	; 0x68
 800404e:	5a9b      	ldrh	r3, [r3, r2]
 8004050:	1dba      	adds	r2, r7, #6
 8004052:	8812      	ldrh	r2, [r2, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d327      	bcc.n	80040a8 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	015b      	lsls	r3, r3, #5
 8004060:	429a      	cmp	r2, r3
 8004062:	d107      	bne.n	8004074 <UART_Start_Receive_IT+0x100>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <UART_Start_Receive_IT+0x180>)
 8004070:	671a      	str	r2, [r3, #112]	; 0x70
 8004072:	e002      	b.n	800407a <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <UART_Start_Receive_IT+0x184>)
 8004078:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	0049      	lsls	r1, r1, #1
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	0549      	lsls	r1, r1, #21
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	e01d      	b.n	80040e4 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	015b      	lsls	r3, r3, #5
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d107      	bne.n	80040c4 <UART_Start_Receive_IT+0x150>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <UART_Start_Receive_IT+0x188>)
 80040c0:	671a      	str	r2, [r3, #112]	; 0x70
 80040c2:	e002      	b.n	80040ca <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <UART_Start_Receive_IT+0x18c>)
 80040c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2190      	movs	r1, #144	; 0x90
 80040de:	0049      	lsls	r1, r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	000001ff 	.word	0x000001ff
 80040f4:	080045c9 	.word	0x080045c9
 80040f8:	080043a5 	.word	0x080043a5
 80040fc:	080042b9 	.word	0x080042b9
 8004100:	080041cd 	.word	0x080041cd

08004104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4912      	ldr	r1, [pc, #72]	; (8004160 <UART_EndRxTransfer+0x5c>)
 8004118:	400a      	ands	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	490f      	ldr	r1, [pc, #60]	; (8004164 <UART_EndRxTransfer+0x60>)
 8004128:	400a      	ands	r2, r1
 800412a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2110      	movs	r1, #16
 8004140:	438a      	bics	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2288      	movs	r2, #136	; 0x88
 8004148:	2120      	movs	r1, #32
 800414a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}
 8004160:	fffffedf 	.word	0xfffffedf
 8004164:	effffffe 	.word	0xeffffffe

08004168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	225e      	movs	r2, #94	; 0x5e
 800417a:	2100      	movs	r1, #0
 800417c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2256      	movs	r2, #86	; 0x56
 8004182:	2100      	movs	r1, #0
 8004184:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff fbef 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2140      	movs	r1, #64	; 0x40
 80041aa:	438a      	bics	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2284      	movs	r2, #132	; 0x84
 80041b2:	2120      	movs	r1, #32
 80041b4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff fbcc 	bl	800395c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041d4:	200e      	movs	r0, #14
 80041d6:	183b      	adds	r3, r7, r0
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	2160      	movs	r1, #96	; 0x60
 80041dc:	5a52      	ldrh	r2, [r2, r1]
 80041de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2288      	movs	r2, #136	; 0x88
 80041e4:	589b      	ldr	r3, [r3, r2]
 80041e6:	2b22      	cmp	r3, #34	; 0x22
 80041e8:	d158      	bne.n	800429c <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f0:	210c      	movs	r1, #12
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b2d9      	uxtb	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	400a      	ands	r2, r1
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	225e      	movs	r2, #94	; 0x5e
 800421a:	5a9b      	ldrh	r3, [r3, r2]
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b299      	uxth	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	225e      	movs	r2, #94	; 0x5e
 8004226:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	225e      	movs	r2, #94	; 0x5e
 800422c:	5a9b      	ldrh	r3, [r3, r2]
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d13b      	bne.n	80042ac <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	491d      	ldr	r1, [pc, #116]	; (80042b4 <UART_RxISR_8BIT+0xe8>)
 8004240:	400a      	ands	r2, r1
 8004242:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2101      	movs	r1, #1
 8004250:	438a      	bics	r2, r1
 8004252:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2288      	movs	r2, #136	; 0x88
 8004258:	2120      	movs	r1, #32
 800425a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d110      	bne.n	800428c <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2110      	movs	r1, #16
 8004276:	438a      	bics	r2, r1
 8004278:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	225c      	movs	r2, #92	; 0x5c
 800427e:	5a9a      	ldrh	r2, [r3, r2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff fb79 	bl	800397c <HAL_UARTEx_RxEventCallback>
 800428a:	e003      	b.n	8004294 <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	0018      	movs	r0, r3
 8004290:	f7fc f914 	bl	80004bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800429a:	e007      	b.n	80042ac <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2108      	movs	r1, #8
 80042a8:	430a      	orrs	r2, r1
 80042aa:	619a      	str	r2, [r3, #24]
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b004      	add	sp, #16
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	fffffedf 	.word	0xfffffedf

080042b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042c0:	200e      	movs	r0, #14
 80042c2:	183b      	adds	r3, r7, r0
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	2160      	movs	r1, #96	; 0x60
 80042c8:	5a52      	ldrh	r2, [r2, r1]
 80042ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2288      	movs	r2, #136	; 0x88
 80042d0:	589b      	ldr	r3, [r3, r2]
 80042d2:	2b22      	cmp	r3, #34	; 0x22
 80042d4:	d158      	bne.n	8004388 <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042dc:	210c      	movs	r1, #12
 80042de:	187b      	adds	r3, r7, r1
 80042e0:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	183a      	adds	r2, r7, r0
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	8812      	ldrh	r2, [r2, #0]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	225e      	movs	r2, #94	; 0x5e
 8004306:	5a9b      	ldrh	r3, [r3, r2]
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b299      	uxth	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	225e      	movs	r2, #94	; 0x5e
 8004312:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	225e      	movs	r2, #94	; 0x5e
 8004318:	5a9b      	ldrh	r3, [r3, r2]
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d13b      	bne.n	8004398 <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	491d      	ldr	r1, [pc, #116]	; (80043a0 <UART_RxISR_16BIT+0xe8>)
 800432c:	400a      	ands	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2101      	movs	r1, #1
 800433c:	438a      	bics	r2, r1
 800433e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2288      	movs	r2, #136	; 0x88
 8004344:	2120      	movs	r1, #32
 8004346:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d110      	bne.n	8004378 <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2110      	movs	r1, #16
 8004362:	438a      	bics	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	225c      	movs	r2, #92	; 0x5c
 800436a:	5a9a      	ldrh	r2, [r3, r2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f7ff fb03 	bl	800397c <HAL_UARTEx_RxEventCallback>
 8004376:	e003      	b.n	8004380 <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f7fc f89e 	bl	80004bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004386:	e007      	b.n	8004398 <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2108      	movs	r1, #8
 8004394:	430a      	orrs	r2, r1
 8004396:	619a      	str	r2, [r3, #24]
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b004      	add	sp, #16
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	fffffedf 	.word	0xfffffedf

080043a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80043ac:	231a      	movs	r3, #26
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	2160      	movs	r1, #96	; 0x60
 80043b4:	5a52      	ldrh	r2, [r2, r1]
 80043b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2288      	movs	r2, #136	; 0x88
 80043d4:	589b      	ldr	r3, [r3, r2]
 80043d6:	2b22      	cmp	r3, #34	; 0x22
 80043d8:	d000      	beq.n	80043dc <UART_RxISR_8BIT_FIFOEN+0x38>
 80043da:	e0e1      	b.n	80045a0 <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043dc:	230e      	movs	r3, #14
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	2168      	movs	r1, #104	; 0x68
 80043e4:	5a52      	ldrh	r2, [r2, r1]
 80043e6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043e8:	e0aa      	b.n	8004540 <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f0:	210c      	movs	r1, #12
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043f6:	187b      	adds	r3, r7, r1
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	231a      	movs	r3, #26
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b2d9      	uxtb	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	400a      	ands	r2, r1
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	225e      	movs	r2, #94	; 0x5e
 800441c:	5a9b      	ldrh	r3, [r3, r2]
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b299      	uxth	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	225e      	movs	r2, #94	; 0x5e
 8004428:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2207      	movs	r2, #7
 8004436:	4013      	ands	r3, r2
 8004438:	d049      	beq.n	80044ce <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2201      	movs	r2, #1
 800443e:	4013      	ands	r3, r2
 8004440:	d010      	beq.n	8004464 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d00b      	beq.n	8004464 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	228c      	movs	r2, #140	; 0x8c
 8004458:	589b      	ldr	r3, [r3, r2]
 800445a:	2201      	movs	r2, #1
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	218c      	movs	r1, #140	; 0x8c
 8004462:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2202      	movs	r2, #2
 8004468:	4013      	ands	r3, r2
 800446a:	d00f      	beq.n	800448c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2201      	movs	r2, #1
 8004470:	4013      	ands	r3, r2
 8004472:	d00b      	beq.n	800448c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2202      	movs	r2, #2
 800447a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	228c      	movs	r2, #140	; 0x8c
 8004480:	589b      	ldr	r3, [r3, r2]
 8004482:	2204      	movs	r2, #4
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	218c      	movs	r1, #140	; 0x8c
 800448a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2204      	movs	r2, #4
 8004490:	4013      	ands	r3, r2
 8004492:	d00f      	beq.n	80044b4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2201      	movs	r2, #1
 8004498:	4013      	ands	r3, r2
 800449a:	d00b      	beq.n	80044b4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2204      	movs	r2, #4
 80044a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	228c      	movs	r2, #140	; 0x8c
 80044a8:	589b      	ldr	r3, [r3, r2]
 80044aa:	2202      	movs	r2, #2
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	218c      	movs	r1, #140	; 0x8c
 80044b2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	228c      	movs	r2, #140	; 0x8c
 80044b8:	589b      	ldr	r3, [r3, r2]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7ff fa53 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	228c      	movs	r2, #140	; 0x8c
 80044ca:	2100      	movs	r1, #0
 80044cc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	225e      	movs	r2, #94	; 0x5e
 80044d2:	5a9b      	ldrh	r3, [r3, r2]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d132      	bne.n	8004540 <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4934      	ldr	r1, [pc, #208]	; (80045b8 <UART_RxISR_8BIT_FIFOEN+0x214>)
 80044e6:	400a      	ands	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4931      	ldr	r1, [pc, #196]	; (80045bc <UART_RxISR_8BIT_FIFOEN+0x218>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2288      	movs	r2, #136	; 0x88
 80044fe:	2120      	movs	r1, #32
 8004500:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d110      	bne.n	8004532 <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2110      	movs	r1, #16
 800451c:	438a      	bics	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	225c      	movs	r2, #92	; 0x5c
 8004524:	5a9a      	ldrh	r2, [r3, r2]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f7ff fa26 	bl	800397c <HAL_UARTEx_RxEventCallback>
 8004530:	e003      	b.n	800453a <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f7fb ffc1 	bl	80004bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004540:	230e      	movs	r3, #14
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2220      	movs	r2, #32
 800454e:	4013      	ands	r3, r2
 8004550:	d000      	beq.n	8004554 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8004552:	e74a      	b.n	80043ea <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004554:	200a      	movs	r0, #10
 8004556:	183b      	adds	r3, r7, r0
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	215e      	movs	r1, #94	; 0x5e
 800455c:	5a52      	ldrh	r2, [r2, r1]
 800455e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004560:	0001      	movs	r1, r0
 8004562:	187b      	adds	r3, r7, r1
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d022      	beq.n	80045b0 <UART_RxISR_8BIT_FIFOEN+0x20c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2268      	movs	r2, #104	; 0x68
 800456e:	5a9b      	ldrh	r3, [r3, r2]
 8004570:	187a      	adds	r2, r7, r1
 8004572:	8812      	ldrh	r2, [r2, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d21b      	bcs.n	80045b0 <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	490f      	ldr	r1, [pc, #60]	; (80045c0 <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8004584:	400a      	ands	r2, r1
 8004586:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <UART_RxISR_8BIT_FIFOEN+0x220>)
 800458c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2120      	movs	r1, #32
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800459e:	e007      	b.n	80045b0 <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2108      	movs	r1, #8
 80045ac:	430a      	orrs	r2, r1
 80045ae:	619a      	str	r2, [r3, #24]
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b008      	add	sp, #32
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	fffffeff 	.word	0xfffffeff
 80045bc:	effffffe 	.word	0xeffffffe
 80045c0:	efffffff 	.word	0xefffffff
 80045c4:	080041cd 	.word	0x080041cd

080045c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80045d0:	2322      	movs	r3, #34	; 0x22
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	2160      	movs	r1, #96	; 0x60
 80045d8:	5a52      	ldrh	r2, [r2, r1]
 80045da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2288      	movs	r2, #136	; 0x88
 80045f8:	589b      	ldr	r3, [r3, r2]
 80045fa:	2b22      	cmp	r3, #34	; 0x22
 80045fc:	d000      	beq.n	8004600 <UART_RxISR_16BIT_FIFOEN+0x38>
 80045fe:	e0e1      	b.n	80047c4 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004600:	2316      	movs	r3, #22
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	2168      	movs	r1, #104	; 0x68
 8004608:	5a52      	ldrh	r2, [r2, r1]
 800460a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800460c:	e0aa      	b.n	8004764 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004614:	2114      	movs	r1, #20
 8004616:	187b      	adds	r3, r7, r1
 8004618:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004620:	187b      	adds	r3, r7, r1
 8004622:	2222      	movs	r2, #34	; 0x22
 8004624:	18ba      	adds	r2, r7, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	4013      	ands	r3, r2
 800462c:	b29a      	uxth	r2, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	225e      	movs	r2, #94	; 0x5e
 8004640:	5a9b      	ldrh	r3, [r3, r2]
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b299      	uxth	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	225e      	movs	r2, #94	; 0x5e
 800464c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2207      	movs	r2, #7
 800465a:	4013      	ands	r3, r2
 800465c:	d049      	beq.n	80046f2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	2201      	movs	r2, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d010      	beq.n	8004688 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4013      	ands	r3, r2
 800466e:	d00b      	beq.n	8004688 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	228c      	movs	r2, #140	; 0x8c
 800467c:	589b      	ldr	r3, [r3, r2]
 800467e:	2201      	movs	r2, #1
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	218c      	movs	r1, #140	; 0x8c
 8004686:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	2202      	movs	r2, #2
 800468c:	4013      	ands	r3, r2
 800468e:	d00f      	beq.n	80046b0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	d00b      	beq.n	80046b0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2202      	movs	r2, #2
 800469e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	228c      	movs	r2, #140	; 0x8c
 80046a4:	589b      	ldr	r3, [r3, r2]
 80046a6:	2204      	movs	r2, #4
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	218c      	movs	r1, #140	; 0x8c
 80046ae:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	2204      	movs	r2, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d00f      	beq.n	80046d8 <UART_RxISR_16BIT_FIFOEN+0x110>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2201      	movs	r2, #1
 80046bc:	4013      	ands	r3, r2
 80046be:	d00b      	beq.n	80046d8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2204      	movs	r2, #4
 80046c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	228c      	movs	r2, #140	; 0x8c
 80046cc:	589b      	ldr	r3, [r3, r2]
 80046ce:	2202      	movs	r2, #2
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	218c      	movs	r1, #140	; 0x8c
 80046d6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	228c      	movs	r2, #140	; 0x8c
 80046dc:	589b      	ldr	r3, [r3, r2]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7ff f941 	bl	800396c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	228c      	movs	r2, #140	; 0x8c
 80046ee:	2100      	movs	r1, #0
 80046f0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	225e      	movs	r2, #94	; 0x5e
 80046f6:	5a9b      	ldrh	r3, [r3, r2]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d132      	bne.n	8004764 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4934      	ldr	r1, [pc, #208]	; (80047dc <UART_RxISR_16BIT_FIFOEN+0x214>)
 800470a:	400a      	ands	r2, r1
 800470c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4931      	ldr	r1, [pc, #196]	; (80047e0 <UART_RxISR_16BIT_FIFOEN+0x218>)
 800471a:	400a      	ands	r2, r1
 800471c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2288      	movs	r2, #136	; 0x88
 8004722:	2120      	movs	r1, #32
 8004724:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d110      	bne.n	8004756 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2110      	movs	r1, #16
 8004740:	438a      	bics	r2, r1
 8004742:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	225c      	movs	r2, #92	; 0x5c
 8004748:	5a9a      	ldrh	r2, [r3, r2]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0011      	movs	r1, r2
 800474e:	0018      	movs	r0, r3
 8004750:	f7ff f914 	bl	800397c <HAL_UARTEx_RxEventCallback>
 8004754:	e003      	b.n	800475e <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb feaf 	bl	80004bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004764:	2316      	movs	r3, #22
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	2220      	movs	r2, #32
 8004772:	4013      	ands	r3, r2
 8004774:	d000      	beq.n	8004778 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8004776:	e74a      	b.n	800460e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004778:	200e      	movs	r0, #14
 800477a:	183b      	adds	r3, r7, r0
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	215e      	movs	r1, #94	; 0x5e
 8004780:	5a52      	ldrh	r2, [r2, r1]
 8004782:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004784:	0001      	movs	r1, r0
 8004786:	187b      	adds	r3, r7, r1
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d022      	beq.n	80047d4 <UART_RxISR_16BIT_FIFOEN+0x20c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2268      	movs	r2, #104	; 0x68
 8004792:	5a9b      	ldrh	r3, [r3, r2]
 8004794:	187a      	adds	r2, r7, r1
 8004796:	8812      	ldrh	r2, [r2, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d21b      	bcs.n	80047d4 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	490f      	ldr	r1, [pc, #60]	; (80047e4 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 80047a8:	400a      	ands	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <UART_RxISR_16BIT_FIFOEN+0x220>)
 80047b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2120      	movs	r1, #32
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047c2:	e007      	b.n	80047d4 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2108      	movs	r1, #8
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b00a      	add	sp, #40	; 0x28
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	fffffeff 	.word	0xfffffeff
 80047e0:	effffffe 	.word	0xeffffffe
 80047e4:	efffffff 	.word	0xefffffff
 80047e8:	080042b9 	.word	0x080042b9

080047ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b002      	add	sp, #8
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	2600      	movs	r6, #0
 8004820:	4d0c      	ldr	r5, [pc, #48]	; (8004854 <__libc_init_array+0x38>)
 8004822:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	2600      	movs	r6, #0
 800482e:	f000 f821 	bl	8004874 <_init>
 8004832:	4d0a      	ldr	r5, [pc, #40]	; (800485c <__libc_init_array+0x40>)
 8004834:	4c0a      	ldr	r4, [pc, #40]	; (8004860 <__libc_init_array+0x44>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	00b3      	lsls	r3, r6, #2
 8004842:	58eb      	ldr	r3, [r5, r3]
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	00b3      	lsls	r3, r6, #2
 800484c:	58eb      	ldr	r3, [r5, r3]
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	08004974 	.word	0x08004974
 8004858:	08004974 	.word	0x08004974
 800485c:	08004974 	.word	0x08004974
 8004860:	08004978 	.word	0x08004978

08004864 <memset>:
 8004864:	0003      	movs	r3, r0
 8004866:	1882      	adds	r2, r0, r2
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	7019      	strb	r1, [r3, #0]
 8004870:	3301      	adds	r3, #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <_init>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr

08004880 <_fini>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr
